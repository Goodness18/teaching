2023-05-09 18:35:09,542 [3529] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-09 18:35:09,542 [3529] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-09 18:35:09,542 [3529] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-09 18:35:09,543 [3529] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-09 18:35:09,544 [3529] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-09 18:35:09,544 [3529] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-09 18:35:11,586 [3529] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-09 18:35:11,809 [3529] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-09 18:35:11,810 [3529] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-09 18:35:11,811 [3529] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-09 18:35:11,812 [3529] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-09 18:47:26,387 [3529] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-09 18:47:26,388 [3529] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-09 18:47:26,388 [3529] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-09 18:47:26,390 [3529] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-09 18:47:26,390 [3529] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-09 18:47:26,391 [3529] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-09 21:26:58,424 [3529] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-09 21:26:58,424 [3529] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-09 21:26:58,424 [3529] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-09 21:26:58,427 [3529] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-09 21:26:58,427 [3529] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-09 21:26:58,427 [3529] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-09 21:29:55,553 [3529] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/builtins.pyi
2023-05-09 21:29:55,648 [3529] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-05-09 21:55:34,938 [3529] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-09 21:55:34,941 [3529] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2023-05-09 21:55:34,941 [3529] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2023-05-09 21:55:34,943 [3529] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-05-09 21:55:34,943 [3529] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-09 21:55:34,954 [3529] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/__init__.py
2023-05-09 21:55:46,385 [3529] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-09 21:55:46,386 [3529] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-05-09 21:55:46,386 [3529] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-05-09 21:55:46,388 [3529] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-05-09 21:55:46,388 [3529] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-09 21:56:32,084 [3529] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-09 21:56:32,085 [3529] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-05-09 21:56:32,085 [3529] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-05-09 21:56:32,087 [3529] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-05-09 21:56:32,087 [3529] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-05-09 21:56:32,091 [3529] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 3 (to 2 in part parser)
2023-05-09 21:56:32,092 [3529] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-10 16:28:10,100 [1160] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-10 16:28:10,100 [1160] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-10 16:28:10,100 [1160] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-10 16:28:10,101 [1160] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-10 16:28:10,101 [1160] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-10 16:28:10,101 [1160] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-10 16:28:12,385 [1160] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-10 16:28:12,648 [1160] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-10 16:28:12,650 [1160] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-10 16:28:12,650 [1160] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-10 16:28:12,651 [1160] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-10 16:38:43,560 [1160] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-10 16:38:43,560 [1160] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-10 16:38:43,560 [1160] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-10 16:38:43,561 [1160] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-10 16:38:43,562 [1160] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-10 16:38:43,562 [1160] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-10 17:03:22,889 [1160] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-10 17:03:22,890 [1160] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-10 17:03:22,891 [1160] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-10 17:03:22,895 [1160] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-10 17:03:22,896 [1160] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-10 17:03:22,897 [1160] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-10 17:14:01,346 [1160] DEBUG    matplotlib:275: [JupyterRequire] matplotlib data path: /Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data
2023-05-10 17:14:01,350 [1160] DEBUG    matplotlib:275: [JupyterRequire] CONFIGDIR=/Users/teaching/.matplotlib
2023-05-10 17:14:01,352 [1160] DEBUG    matplotlib:1445: [JupyterRequire] interactive is False
2023-05-10 17:14:01,352 [1160] DEBUG    matplotlib:1446: [JupyterRequire] platform is darwin
2023-05-10 17:14:01,352 [1160] DEBUG    matplotlib:1447: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'PyObjCTools', 'ruamel', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', '_cython_0_29_30', 'cython_runtime', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.message', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.constants', 'zmq.backend.cython.socket', 'zmq.backend.cython._device', 'zmq.backend.cython._poll', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython._version', 'zmq.backend.cython.error', 'zmq.backend.cython.utils', 'zmq.backend.cython', 'zmq.backend', 'zmq.sugar.attrsettr', 'zmq._typing', 'zmq.utils', 'zmq.utils.jsonapi', 'zmq.sugar.poll', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', 'tornado', 'numbers', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', '__future__', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__darwin_darwin', '_osx_support', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi._compatibility', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.inference.docstring_utils', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'concurrent.futures.thread', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', '_scproxy', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipykernel.control', 'ipykernel.heartbeat', 'ipykernel.iostream', 'IPython.utils.tokenutil', 'ipykernel.jsonutil', 'psutil._common', 'psutil._compat', 'psutil._psposix', 'psutil._psutil_osx', 'psutil._psutil_posix', 'psutil._psosx', 'psutil', 'tornado.locks', 'tornado.queues', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'packaging.__about__', 'packaging', 'packaging._structures', 'packaging.version', 'ipykernel.eventloops', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'setuptools._distutils', '_distutils_hack.override', 'setuptools._deprecation_warning', 'setuptools.version', 'setuptools.monkey', 'setuptools.extension', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'setuptools.command', 'setuptools.windows_support', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'setuptools', 'ctypes.macholib', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ctypes.macholib.dyld', 'ctypes.util', 'appnope._nope', 'appnope', 'storemagic', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'thamos', 'ipaddress', 'attr._compat', 'attr._config', 'attr.exceptions', 'attr.setters', 'attr._make', 'attr.converters', 'attr.filters', 'attr.validators', 'attr._cmp', 'attr._funcs', 'attr._version_info', 'attr._next_gen', 'attr', 'jsonschema._utils', 'jsonschema.exceptions', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', 'jsonschema._format', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pvector', 'pyrsistent._pmap', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'pyrsistent', 'pyrsistent.typing', 'jsonschema._types', 'jsonschema.protocols', 'jsonschema._legacy_validators', 'fractions', 'jsonschema._validators', 'jsonschema.validators', 'jsonschema', 'click._compat', 'click.globals', 'click.utils', 'click.exceptions', 'click.types', 'click._unicodefun', 'click.parser', 'click.formatting', 'click.termui', 'click.core', 'click.decorators', 'click', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3._version', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.connection', '_cffi_backend', '_brotli.lib', '_brotli', 'brotli._brotli', 'brotli.brotli', 'brotli', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util', 'urllib3.util.proxy', 'urllib3._collections', 'urllib3.util.ssl_match_hostname', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.hebrewprober', 'chardet.sbcharsetprober', 'chardet.langbulgarianmodel', 'chardet.langgreekmodel', 'chardet.langhebrewmodel', 'chardet.langrussianmodel', 'chardet.langthaimodel', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'http.cookiejar', 'http.cookies', 'requests.compat', 'requests.exceptions', 'charset_normalizer.constant', '_multibytecodec', 'charset_normalizer.utils', 'charset_normalizer.md', 'charset_normalizer.models', 'charset_normalizer.assets', 'charset_normalizer.cd', 'charset_normalizer.api', 'charset_normalizer.legacy', 'charset_normalizer.version', 'charset_normalizer', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3._version', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.util.ssl_match_hostname', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet', 'requests.packages', 'certifi.core', 'certifi', 'requests.certs', 'requests.__version__', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.auth', 'requests.hooks', 'requests.status_codes', 'requests.models', 'socks', 'urllib3.contrib.socks', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'yaml.error', 'yaml.tokens', 'yaml.events', 'yaml.nodes', 'yaml.reader', 'yaml.scanner', 'yaml.parser', 'yaml.composer', 'yaml.constructor', 'yaml.resolver', 'yaml.loader', 'yaml.emitter', 'yaml.serializer', 'yaml.representer', 'yaml.dumper', 'yaml._yaml', 'yaml.cyaml', 'yaml', 'thoth', 'thoth.common.config.base', 'thoth.common.config.hardware_information', 'thoth.common.config.operating_system', 'thoth.common.exceptions', 'thoth.common.config.runtime_environment', 'thoth.common.config', 'thoth.common.enums', 'thoth.common.helpers', 'thoth.common.json', 'jsonformatter.jsonformatter', 'jsonformatter', 'sentry_sdk._types', 'sentry_sdk._compat', 'sentry_sdk.consts', 'sentry_sdk._functools', 'sentry_sdk.utils', 'sentry_sdk.tracing_utils', 'sentry_sdk.tracing', 'sentry_sdk.session', 'sentry_sdk.envelope', 'sentry_sdk.attachments', 'sentry_sdk.scope', 'sentry_sdk.serializer', 'sentry_sdk._queue', 'sentry_sdk.worker', 'sentry_sdk.transport', 'sentry_sdk.integrations', 'sentry_sdk.sessions', 'sentry_sdk.profiler', 'sentry_sdk.scrubber', 'sentry_sdk.client', 'sentry_sdk.hub', 'sentry_sdk.api', 'sentry_sdk.crons', 'sentry_sdk.debug', 'sentry_sdk', 'sentry_sdk.integrations.logging', 'thoth.common.logging', 'openshift', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'multiprocessing.util', '_multiprocessing', 'multiprocessing.connection', 'multiprocessing.pool', 'six.moves.urllib', 'six.moves.urllib.parse', 'kubernetes.client.configuration', 'kubernetes.client.models.admissionregistration_v1beta1_service_reference', 'kubernetes.client.models.admissionregistration_v1beta1_webhook_client_config', 'kubernetes.client.models.apiextensions_v1beta1_service_reference', 'kubernetes.client.models.apiextensions_v1beta1_webhook_client_config', 'kubernetes.client.models.apiregistration_v1beta1_service_reference', 'kubernetes.client.models.apps_v1beta1_deployment', 'kubernetes.client.models.apps_v1beta1_deployment_condition', 'kubernetes.client.models.apps_v1beta1_deployment_list', 'kubernetes.client.models.apps_v1beta1_deployment_rollback', 'kubernetes.client.models.apps_v1beta1_deployment_spec', 'kubernetes.client.models.apps_v1beta1_deployment_status', 'kubernetes.client.models.apps_v1beta1_deployment_strategy', 'kubernetes.client.models.apps_v1beta1_rollback_config', 'kubernetes.client.models.apps_v1beta1_rolling_update_deployment', 'kubernetes.client.models.apps_v1beta1_scale', 'kubernetes.client.models.apps_v1beta1_scale_spec', 'kubernetes.client.models.apps_v1beta1_scale_status', 'kubernetes.client.models.extensions_v1beta1_allowed_csi_driver', 'kubernetes.client.models.extensions_v1beta1_allowed_flex_volume', 'kubernetes.client.models.extensions_v1beta1_allowed_host_path', 'kubernetes.client.models.extensions_v1beta1_deployment', 'kubernetes.client.models.extensions_v1beta1_deployment_condition', 'kubernetes.client.models.extensions_v1beta1_deployment_list', 'kubernetes.client.models.extensions_v1beta1_deployment_rollback', 'kubernetes.client.models.extensions_v1beta1_deployment_spec', 'kubernetes.client.models.extensions_v1beta1_deployment_status', 'kubernetes.client.models.extensions_v1beta1_deployment_strategy', 'kubernetes.client.models.extensions_v1beta1_fs_group_strategy_options', 'kubernetes.client.models.extensions_v1beta1_http_ingress_path', 'kubernetes.client.models.extensions_v1beta1_http_ingress_rule_value', 'kubernetes.client.models.extensions_v1beta1_host_port_range', 'kubernetes.client.models.extensions_v1beta1_id_range', 'kubernetes.client.models.extensions_v1beta1_ingress', 'kubernetes.client.models.extensions_v1beta1_ingress_backend', 'kubernetes.client.models.extensions_v1beta1_ingress_list', 'kubernetes.client.models.extensions_v1beta1_ingress_rule', 'kubernetes.client.models.extensions_v1beta1_ingress_spec', 'kubernetes.client.models.extensions_v1beta1_ingress_status', 'kubernetes.client.models.extensions_v1beta1_ingress_tls', 'kubernetes.client.models.extensions_v1beta1_pod_security_policy', 'kubernetes.client.models.extensions_v1beta1_pod_security_policy_list', 'kubernetes.client.models.extensions_v1beta1_pod_security_policy_spec', 'kubernetes.client.models.extensions_v1beta1_rollback_config', 'kubernetes.client.models.extensions_v1beta1_rolling_update_deployment', 'kubernetes.client.models.extensions_v1beta1_run_as_group_strategy_options', 'kubernetes.client.models.extensions_v1beta1_run_as_user_strategy_options', 'kubernetes.client.models.extensions_v1beta1_runtime_class_strategy_options', 'kubernetes.client.models.extensions_v1beta1_se_linux_strategy_options', 'kubernetes.client.models.extensions_v1beta1_scale', 'kubernetes.client.models.extensions_v1beta1_scale_spec', 'kubernetes.client.models.extensions_v1beta1_scale_status', 'kubernetes.client.models.extensions_v1beta1_supplemental_groups_strategy_options', 'kubernetes.client.models.networking_v1beta1_http_ingress_path', 'kubernetes.client.models.networking_v1beta1_http_ingress_rule_value', 'kubernetes.client.models.networking_v1beta1_ingress', 'kubernetes.client.models.networking_v1beta1_ingress_backend', 'kubernetes.client.models.networking_v1beta1_ingress_list', 'kubernetes.client.models.networking_v1beta1_ingress_rule', 'kubernetes.client.models.networking_v1beta1_ingress_spec', 'kubernetes.client.models.networking_v1beta1_ingress_status', 'kubernetes.client.models.networking_v1beta1_ingress_tls', 'kubernetes.client.models.policy_v1beta1_allowed_csi_driver', 'kubernetes.client.models.policy_v1beta1_allowed_flex_volume', 'kubernetes.client.models.policy_v1beta1_allowed_host_path', 'kubernetes.client.models.policy_v1beta1_fs_group_strategy_options', 'kubernetes.client.models.policy_v1beta1_host_port_range', 'kubernetes.client.models.policy_v1beta1_id_range', 'kubernetes.client.models.policy_v1beta1_pod_security_policy', 'kubernetes.client.models.policy_v1beta1_pod_security_policy_list', 'kubernetes.client.models.policy_v1beta1_pod_security_policy_spec', 'kubernetes.client.models.policy_v1beta1_run_as_group_strategy_options', 'kubernetes.client.models.policy_v1beta1_run_as_user_strategy_options', 'kubernetes.client.models.policy_v1beta1_runtime_class_strategy_options', 'kubernetes.client.models.policy_v1beta1_se_linux_strategy_options', 'kubernetes.client.models.policy_v1beta1_supplemental_groups_strategy_options', 'kubernetes.client.models.runtime_raw_extension', 'kubernetes.client.models.v1_api_group', 'kubernetes.client.models.v1_api_group_list', 'kubernetes.client.models.v1_api_resource', 'kubernetes.client.models.v1_api_resource_list', 'kubernetes.client.models.v1_api_service', 'kubernetes.client.models.v1_api_service_condition', 'kubernetes.client.models.v1_api_service_list', 'kubernetes.client.models.v1_api_service_spec', 'kubernetes.client.models.v1_api_service_status', 'kubernetes.client.models.v1_api_versions', 'kubernetes.client.models.v1_aws_elastic_block_store_volume_source', 'kubernetes.client.models.v1_affinity', 'kubernetes.client.models.v1_aggregation_rule', 'kubernetes.client.models.v1_attached_volume', 'kubernetes.client.models.v1_azure_disk_volume_source', 'kubernetes.client.models.v1_azure_file_persistent_volume_source', 'kubernetes.client.models.v1_azure_file_volume_source', 'kubernetes.client.models.v1_binding', 'kubernetes.client.models.v1_csi_persistent_volume_source', 'kubernetes.client.models.v1_csi_volume_source', 'kubernetes.client.models.v1_capabilities', 'kubernetes.client.models.v1_ceph_fs_persistent_volume_source', 'kubernetes.client.models.v1_ceph_fs_volume_source', 'kubernetes.client.models.v1_cinder_persistent_volume_source', 'kubernetes.client.models.v1_cinder_volume_source', 'kubernetes.client.models.v1_client_ip_config', 'kubernetes.client.models.v1_cluster_role', 'kubernetes.client.models.v1_cluster_role_binding', 'kubernetes.client.models.v1_cluster_role_binding_list', 'kubernetes.client.models.v1_cluster_role_list', 'kubernetes.client.models.v1_component_condition', 'kubernetes.client.models.v1_component_status', 'kubernetes.client.models.v1_component_status_list', 'kubernetes.client.models.v1_config_map', 'kubernetes.client.models.v1_config_map_env_source', 'kubernetes.client.models.v1_config_map_key_selector', 'kubernetes.client.models.v1_config_map_list', 'kubernetes.client.models.v1_config_map_node_config_source', 'kubernetes.client.models.v1_config_map_projection', 'kubernetes.client.models.v1_config_map_volume_source', 'kubernetes.client.models.v1_container', 'kubernetes.client.models.v1_container_image', 'kubernetes.client.models.v1_container_port', 'kubernetes.client.models.v1_container_state', 'kubernetes.client.models.v1_container_state_running', 'kubernetes.client.models.v1_container_state_terminated', 'kubernetes.client.models.v1_container_state_waiting', 'kubernetes.client.models.v1_container_status', 'kubernetes.client.models.v1_controller_revision', 'kubernetes.client.models.v1_controller_revision_list', 'kubernetes.client.models.v1_cross_version_object_reference', 'kubernetes.client.models.v1_daemon_endpoint', 'kubernetes.client.models.v1_daemon_set', 'kubernetes.client.models.v1_daemon_set_condition', 'kubernetes.client.models.v1_daemon_set_list', 'kubernetes.client.models.v1_daemon_set_spec', 'kubernetes.client.models.v1_daemon_set_status', 'kubernetes.client.models.v1_daemon_set_update_strategy', 'kubernetes.client.models.v1_delete_options', 'kubernetes.client.models.v1_deployment', 'kubernetes.client.models.v1_deployment_condition', 'kubernetes.client.models.v1_deployment_list', 'kubernetes.client.models.v1_deployment_spec', 'kubernetes.client.models.v1_deployment_status', 'kubernetes.client.models.v1_deployment_strategy', 'kubernetes.client.models.v1_downward_api_projection', 'kubernetes.client.models.v1_downward_api_volume_file', 'kubernetes.client.models.v1_downward_api_volume_source', 'kubernetes.client.models.v1_empty_dir_volume_source', 'kubernetes.client.models.v1_endpoint_address', 'kubernetes.client.models.v1_endpoint_port', 'kubernetes.client.models.v1_endpoint_subset', 'kubernetes.client.models.v1_endpoints', 'kubernetes.client.models.v1_endpoints_list', 'kubernetes.client.models.v1_env_from_source', 'kubernetes.client.models.v1_env_var', 'kubernetes.client.models.v1_env_var_source', 'kubernetes.client.models.v1_event', 'kubernetes.client.models.v1_event_list', 'kubernetes.client.models.v1_event_series', 'kubernetes.client.models.v1_event_source', 'kubernetes.client.models.v1_exec_action', 'kubernetes.client.models.v1_fc_volume_source', 'kubernetes.client.models.v1_flex_persistent_volume_source', 'kubernetes.client.models.v1_flex_volume_source', 'kubernetes.client.models.v1_flocker_volume_source', 'kubernetes.client.models.v1_gce_persistent_disk_volume_source', 'kubernetes.client.models.v1_git_repo_volume_source', 'kubernetes.client.models.v1_glusterfs_persistent_volume_source', 'kubernetes.client.models.v1_glusterfs_volume_source', 'kubernetes.client.models.v1_group_version_for_discovery', 'kubernetes.client.models.v1_http_get_action', 'kubernetes.client.models.v1_http_header', 'kubernetes.client.models.v1_handler', 'kubernetes.client.models.v1_horizontal_pod_autoscaler', 'kubernetes.client.models.v1_horizontal_pod_autoscaler_list', 'kubernetes.client.models.v1_horizontal_pod_autoscaler_spec', 'kubernetes.client.models.v1_horizontal_pod_autoscaler_status', 'kubernetes.client.models.v1_host_alias', 'kubernetes.client.models.v1_host_path_volume_source', 'kubernetes.client.models.v1_ip_block', 'kubernetes.client.models.v1_iscsi_persistent_volume_source', 'kubernetes.client.models.v1_iscsi_volume_source', 'kubernetes.client.models.v1_initializer', 'kubernetes.client.models.v1_initializers', 'kubernetes.client.models.v1_job', 'kubernetes.client.models.v1_job_condition', 'kubernetes.client.models.v1_job_list', 'kubernetes.client.models.v1_job_spec', 'kubernetes.client.models.v1_job_status', 'kubernetes.client.models.v1_key_to_path', 'kubernetes.client.models.v1_label_selector', 'kubernetes.client.models.v1_label_selector_requirement', 'kubernetes.client.models.v1_lease', 'kubernetes.client.models.v1_lease_list', 'kubernetes.client.models.v1_lease_spec', 'kubernetes.client.models.v1_lifecycle', 'kubernetes.client.models.v1_limit_range', 'kubernetes.client.models.v1_limit_range_item', 'kubernetes.client.models.v1_limit_range_list', 'kubernetes.client.models.v1_limit_range_spec', 'kubernetes.client.models.v1_list_meta', 'kubernetes.client.models.v1_load_balancer_ingress', 'kubernetes.client.models.v1_load_balancer_status', 'kubernetes.client.models.v1_local_object_reference', 'kubernetes.client.models.v1_local_subject_access_review', 'kubernetes.client.models.v1_local_volume_source', 'kubernetes.client.models.v1_managed_fields_entry', 'kubernetes.client.models.v1_nfs_volume_source', 'kubernetes.client.models.v1_namespace', 'kubernetes.client.models.v1_namespace_list', 'kubernetes.client.models.v1_namespace_spec', 'kubernetes.client.models.v1_namespace_status', 'kubernetes.client.models.v1_network_policy', 'kubernetes.client.models.v1_network_policy_egress_rule', 'kubernetes.client.models.v1_network_policy_ingress_rule', 'kubernetes.client.models.v1_network_policy_list', 'kubernetes.client.models.v1_network_policy_peer', 'kubernetes.client.models.v1_network_policy_port', 'kubernetes.client.models.v1_network_policy_spec', 'kubernetes.client.models.v1_node', 'kubernetes.client.models.v1_node_address', 'kubernetes.client.models.v1_node_affinity', 'kubernetes.client.models.v1_node_condition', 'kubernetes.client.models.v1_node_config_source', 'kubernetes.client.models.v1_node_config_status', 'kubernetes.client.models.v1_node_daemon_endpoints', 'kubernetes.client.models.v1_node_list', 'kubernetes.client.models.v1_node_selector', 'kubernetes.client.models.v1_node_selector_requirement', 'kubernetes.client.models.v1_node_selector_term', 'kubernetes.client.models.v1_node_spec', 'kubernetes.client.models.v1_node_status', 'kubernetes.client.models.v1_node_system_info', 'kubernetes.client.models.v1_non_resource_attributes', 'kubernetes.client.models.v1_non_resource_rule', 'kubernetes.client.models.v1_object_field_selector', 'kubernetes.client.models.v1_object_meta', 'kubernetes.client.models.v1_object_reference', 'kubernetes.client.models.v1_owner_reference', 'kubernetes.client.models.v1_persistent_volume', 'kubernetes.client.models.v1_persistent_volume_claim', 'kubernetes.client.models.v1_persistent_volume_claim_condition', 'kubernetes.client.models.v1_persistent_volume_claim_list', 'kubernetes.client.models.v1_persistent_volume_claim_spec', 'kubernetes.client.models.v1_persistent_volume_claim_status', 'kubernetes.client.models.v1_persistent_volume_claim_volume_source', 'kubernetes.client.models.v1_persistent_volume_list', 'kubernetes.client.models.v1_persistent_volume_spec', 'kubernetes.client.models.v1_persistent_volume_status', 'kubernetes.client.models.v1_photon_persistent_disk_volume_source', 'kubernetes.client.models.v1_pod', 'kubernetes.client.models.v1_pod_affinity', 'kubernetes.client.models.v1_pod_affinity_term', 'kubernetes.client.models.v1_pod_anti_affinity', 'kubernetes.client.models.v1_pod_condition', 'kubernetes.client.models.v1_pod_dns_config', 'kubernetes.client.models.v1_pod_dns_config_option', 'kubernetes.client.models.v1_pod_list', 'kubernetes.client.models.v1_pod_readiness_gate', 'kubernetes.client.models.v1_pod_security_context', 'kubernetes.client.models.v1_pod_spec', 'kubernetes.client.models.v1_pod_status', 'kubernetes.client.models.v1_pod_template', 'kubernetes.client.models.v1_pod_template_list', 'kubernetes.client.models.v1_pod_template_spec', 'kubernetes.client.models.v1_policy_rule', 'kubernetes.client.models.v1_portworx_volume_source', 'kubernetes.client.models.v1_preconditions', 'kubernetes.client.models.v1_preferred_scheduling_term', 'kubernetes.client.models.v1_priority_class', 'kubernetes.client.models.v1_priority_class_list', 'kubernetes.client.models.v1_probe', 'kubernetes.client.models.v1_projected_volume_source', 'kubernetes.client.models.v1_quobyte_volume_source', 'kubernetes.client.models.v1_rbd_persistent_volume_source', 'kubernetes.client.models.v1_rbd_volume_source', 'kubernetes.client.models.v1_replica_set', 'kubernetes.client.models.v1_replica_set_condition', 'kubernetes.client.models.v1_replica_set_list', 'kubernetes.client.models.v1_replica_set_spec', 'kubernetes.client.models.v1_replica_set_status', 'kubernetes.client.models.v1_replication_controller', 'kubernetes.client.models.v1_replication_controller_condition', 'kubernetes.client.models.v1_replication_controller_list', 'kubernetes.client.models.v1_replication_controller_spec', 'kubernetes.client.models.v1_replication_controller_status', 'kubernetes.client.models.v1_resource_attributes', 'kubernetes.client.models.v1_resource_field_selector', 'kubernetes.client.models.v1_resource_quota', 'kubernetes.client.models.v1_resource_quota_list', 'kubernetes.client.models.v1_resource_quota_spec', 'kubernetes.client.models.v1_resource_quota_status', 'kubernetes.client.models.v1_resource_requirements', 'kubernetes.client.models.v1_resource_rule', 'kubernetes.client.models.v1_role', 'kubernetes.client.models.v1_role_binding', 'kubernetes.client.models.v1_role_binding_list', 'kubernetes.client.models.v1_role_list', 'kubernetes.client.models.v1_role_ref', 'kubernetes.client.models.v1_rolling_update_daemon_set', 'kubernetes.client.models.v1_rolling_update_deployment', 'kubernetes.client.models.v1_rolling_update_stateful_set_strategy', 'kubernetes.client.models.v1_se_linux_options', 'kubernetes.client.models.v1_scale', 'kubernetes.client.models.v1_scale_io_persistent_volume_source', 'kubernetes.client.models.v1_scale_io_volume_source', 'kubernetes.client.models.v1_scale_spec', 'kubernetes.client.models.v1_scale_status', 'kubernetes.client.models.v1_scope_selector', 'kubernetes.client.models.v1_scoped_resource_selector_requirement', 'kubernetes.client.models.v1_secret', 'kubernetes.client.models.v1_secret_env_source', 'kubernetes.client.models.v1_secret_key_selector', 'kubernetes.client.models.v1_secret_list', 'kubernetes.client.models.v1_secret_projection', 'kubernetes.client.models.v1_secret_reference', 'kubernetes.client.models.v1_secret_volume_source', 'kubernetes.client.models.v1_security_context', 'kubernetes.client.models.v1_self_subject_access_review', 'kubernetes.client.models.v1_self_subject_access_review_spec', 'kubernetes.client.models.v1_self_subject_rules_review', 'kubernetes.client.models.v1_self_subject_rules_review_spec', 'kubernetes.client.models.v1_server_address_by_client_cidr', 'kubernetes.client.models.v1_service', 'kubernetes.client.models.v1_service_account', 'kubernetes.client.models.v1_service_account_list', 'kubernetes.client.models.v1_service_account_token_projection', 'kubernetes.client.models.v1_service_list', 'kubernetes.client.models.v1_service_port', 'kubernetes.client.models.v1_service_reference', 'kubernetes.client.models.v1_service_spec', 'kubernetes.client.models.v1_service_status', 'kubernetes.client.models.v1_session_affinity_config', 'kubernetes.client.models.v1_stateful_set', 'kubernetes.client.models.v1_stateful_set_condition', 'kubernetes.client.models.v1_stateful_set_list', 'kubernetes.client.models.v1_stateful_set_spec', 'kubernetes.client.models.v1_stateful_set_status', 'kubernetes.client.models.v1_stateful_set_update_strategy', 'kubernetes.client.models.v1_status', 'kubernetes.client.models.v1_status_cause', 'kubernetes.client.models.v1_status_details', 'kubernetes.client.models.v1_storage_class', 'kubernetes.client.models.v1_storage_class_list', 'kubernetes.client.models.v1_storage_os_persistent_volume_source', 'kubernetes.client.models.v1_storage_os_volume_source', 'kubernetes.client.models.v1_subject', 'kubernetes.client.models.v1_subject_access_review', 'kubernetes.client.models.v1_subject_access_review_spec', 'kubernetes.client.models.v1_subject_access_review_status', 'kubernetes.client.models.v1_subject_rules_review_status', 'kubernetes.client.models.v1_sysctl', 'kubernetes.client.models.v1_tcp_socket_action', 'kubernetes.client.models.v1_taint', 'kubernetes.client.models.v1_token_review', 'kubernetes.client.models.v1_token_review_spec', 'kubernetes.client.models.v1_token_review_status', 'kubernetes.client.models.v1_toleration', 'kubernetes.client.models.v1_topology_selector_label_requirement', 'kubernetes.client.models.v1_topology_selector_term', 'kubernetes.client.models.v1_typed_local_object_reference', 'kubernetes.client.models.v1_user_info', 'kubernetes.client.models.v1_volume', 'kubernetes.client.models.v1_volume_attachment', 'kubernetes.client.models.v1_volume_attachment_list', 'kubernetes.client.models.v1_volume_attachment_source', 'kubernetes.client.models.v1_volume_attachment_spec', 'kubernetes.client.models.v1_volume_attachment_status', 'kubernetes.client.models.v1_volume_device', 'kubernetes.client.models.v1_volume_error', 'kubernetes.client.models.v1_volume_mount', 'kubernetes.client.models.v1_volume_node_affinity', 'kubernetes.client.models.v1_volume_projection', 'kubernetes.client.models.v1_vsphere_virtual_disk_volume_source', 'kubernetes.client.models.v1_watch_event', 'kubernetes.client.models.v1_weighted_pod_affinity_term', 'kubernetes.client.models.v1_windows_security_context_options', 'kubernetes.client.models.v1alpha1_aggregation_rule', 'kubernetes.client.models.v1alpha1_audit_sink', 'kubernetes.client.models.v1alpha1_audit_sink_list', 'kubernetes.client.models.v1alpha1_audit_sink_spec', 'kubernetes.client.models.v1alpha1_cluster_role', 'kubernetes.client.models.v1alpha1_cluster_role_binding', 'kubernetes.client.models.v1alpha1_cluster_role_binding_list', 'kubernetes.client.models.v1alpha1_cluster_role_list', 'kubernetes.client.models.v1alpha1_pod_preset', 'kubernetes.client.models.v1alpha1_pod_preset_list', 'kubernetes.client.models.v1alpha1_pod_preset_spec', 'kubernetes.client.models.v1alpha1_policy', 'kubernetes.client.models.v1alpha1_policy_rule', 'kubernetes.client.models.v1alpha1_priority_class', 'kubernetes.client.models.v1alpha1_priority_class_list', 'kubernetes.client.models.v1alpha1_role', 'kubernetes.client.models.v1alpha1_role_binding', 'kubernetes.client.models.v1alpha1_role_binding_list', 'kubernetes.client.models.v1alpha1_role_list', 'kubernetes.client.models.v1alpha1_role_ref', 'kubernetes.client.models.v1alpha1_runtime_class', 'kubernetes.client.models.v1alpha1_runtime_class_list', 'kubernetes.client.models.v1alpha1_runtime_class_spec', 'kubernetes.client.models.v1alpha1_service_reference', 'kubernetes.client.models.v1alpha1_subject', 'kubernetes.client.models.v1alpha1_volume_attachment', 'kubernetes.client.models.v1alpha1_volume_attachment_list', 'kubernetes.client.models.v1alpha1_volume_attachment_source', 'kubernetes.client.models.v1alpha1_volume_attachment_spec', 'kubernetes.client.models.v1alpha1_volume_attachment_status', 'kubernetes.client.models.v1alpha1_volume_error', 'kubernetes.client.models.v1alpha1_webhook', 'kubernetes.client.models.v1alpha1_webhook_client_config', 'kubernetes.client.models.v1alpha1_webhook_throttle_config', 'kubernetes.client.models.v1beta1_api_service', 'kubernetes.client.models.v1beta1_api_service_condition', 'kubernetes.client.models.v1beta1_api_service_list', 'kubernetes.client.models.v1beta1_api_service_spec', 'kubernetes.client.models.v1beta1_api_service_status', 'kubernetes.client.models.v1beta1_aggregation_rule', 'kubernetes.client.models.v1beta1_csi_driver', 'kubernetes.client.models.v1beta1_csi_driver_list', 'kubernetes.client.models.v1beta1_csi_driver_spec', 'kubernetes.client.models.v1beta1_csi_node', 'kubernetes.client.models.v1beta1_csi_node_driver', 'kubernetes.client.models.v1beta1_csi_node_list', 'kubernetes.client.models.v1beta1_csi_node_spec', 'kubernetes.client.models.v1beta1_certificate_signing_request', 'kubernetes.client.models.v1beta1_certificate_signing_request_condition', 'kubernetes.client.models.v1beta1_certificate_signing_request_list', 'kubernetes.client.models.v1beta1_certificate_signing_request_spec', 'kubernetes.client.models.v1beta1_certificate_signing_request_status', 'kubernetes.client.models.v1beta1_cluster_role', 'kubernetes.client.models.v1beta1_cluster_role_binding', 'kubernetes.client.models.v1beta1_cluster_role_binding_list', 'kubernetes.client.models.v1beta1_cluster_role_list', 'kubernetes.client.models.v1beta1_controller_revision', 'kubernetes.client.models.v1beta1_controller_revision_list', 'kubernetes.client.models.v1beta1_cron_job', 'kubernetes.client.models.v1beta1_cron_job_list', 'kubernetes.client.models.v1beta1_cron_job_spec', 'kubernetes.client.models.v1beta1_cron_job_status', 'kubernetes.client.models.v1beta1_custom_resource_column_definition', 'kubernetes.client.models.v1beta1_custom_resource_conversion', 'kubernetes.client.models.v1beta1_custom_resource_definition', 'kubernetes.client.models.v1beta1_custom_resource_definition_condition', 'kubernetes.client.models.v1beta1_custom_resource_definition_list', 'kubernetes.client.models.v1beta1_custom_resource_definition_names', 'kubernetes.client.models.v1beta1_custom_resource_definition_spec', 'kubernetes.client.models.v1beta1_custom_resource_definition_status', 'kubernetes.client.models.v1beta1_custom_resource_definition_version', 'kubernetes.client.models.v1beta1_custom_resource_subresource_scale', 'kubernetes.client.models.v1beta1_custom_resource_subresources', 'kubernetes.client.models.v1beta1_custom_resource_validation', 'kubernetes.client.models.v1beta1_daemon_set', 'kubernetes.client.models.v1beta1_daemon_set_condition', 'kubernetes.client.models.v1beta1_daemon_set_list', 'kubernetes.client.models.v1beta1_daemon_set_spec', 'kubernetes.client.models.v1beta1_daemon_set_status', 'kubernetes.client.models.v1beta1_daemon_set_update_strategy', 'kubernetes.client.models.v1beta1_event', 'kubernetes.client.models.v1beta1_event_list', 'kubernetes.client.models.v1beta1_event_series', 'kubernetes.client.models.v1beta1_eviction', 'kubernetes.client.models.v1beta1_external_documentation', 'kubernetes.client.models.v1beta1_ip_block', 'kubernetes.client.models.v1beta1_json_schema_props', 'kubernetes.client.models.v1beta1_job_template_spec', 'kubernetes.client.models.v1beta1_lease', 'kubernetes.client.models.v1beta1_lease_list', 'kubernetes.client.models.v1beta1_lease_spec', 'kubernetes.client.models.v1beta1_local_subject_access_review', 'kubernetes.client.models.v1beta1_mutating_webhook', 'kubernetes.client.models.v1beta1_mutating_webhook_configuration', 'kubernetes.client.models.v1beta1_mutating_webhook_configuration_list', 'kubernetes.client.models.v1beta1_network_policy', 'kubernetes.client.models.v1beta1_network_policy_egress_rule', 'kubernetes.client.models.v1beta1_network_policy_ingress_rule', 'kubernetes.client.models.v1beta1_network_policy_list', 'kubernetes.client.models.v1beta1_network_policy_peer', 'kubernetes.client.models.v1beta1_network_policy_port', 'kubernetes.client.models.v1beta1_network_policy_spec', 'kubernetes.client.models.v1beta1_non_resource_attributes', 'kubernetes.client.models.v1beta1_non_resource_rule', 'kubernetes.client.models.v1beta1_pod_disruption_budget', 'kubernetes.client.models.v1beta1_pod_disruption_budget_list', 'kubernetes.client.models.v1beta1_pod_disruption_budget_spec', 'kubernetes.client.models.v1beta1_pod_disruption_budget_status', 'kubernetes.client.models.v1beta1_policy_rule', 'kubernetes.client.models.v1beta1_priority_class', 'kubernetes.client.models.v1beta1_priority_class_list', 'kubernetes.client.models.v1beta1_replica_set', 'kubernetes.client.models.v1beta1_replica_set_condition', 'kubernetes.client.models.v1beta1_replica_set_list', 'kubernetes.client.models.v1beta1_replica_set_spec', 'kubernetes.client.models.v1beta1_replica_set_status', 'kubernetes.client.models.v1beta1_resource_attributes', 'kubernetes.client.models.v1beta1_resource_rule', 'kubernetes.client.models.v1beta1_role', 'kubernetes.client.models.v1beta1_role_binding', 'kubernetes.client.models.v1beta1_role_binding_list', 'kubernetes.client.models.v1beta1_role_list', 'kubernetes.client.models.v1beta1_role_ref', 'kubernetes.client.models.v1beta1_rolling_update_daemon_set', 'kubernetes.client.models.v1beta1_rolling_update_stateful_set_strategy', 'kubernetes.client.models.v1beta1_rule_with_operations', 'kubernetes.client.models.v1beta1_runtime_class', 'kubernetes.client.models.v1beta1_runtime_class_list', 'kubernetes.client.models.v1beta1_self_subject_access_review', 'kubernetes.client.models.v1beta1_self_subject_access_review_spec', 'kubernetes.client.models.v1beta1_self_subject_rules_review', 'kubernetes.client.models.v1beta1_self_subject_rules_review_spec', 'kubernetes.client.models.v1beta1_stateful_set', 'kubernetes.client.models.v1beta1_stateful_set_condition', 'kubernetes.client.models.v1beta1_stateful_set_list', 'kubernetes.client.models.v1beta1_stateful_set_spec', 'kubernetes.client.models.v1beta1_stateful_set_status', 'kubernetes.client.models.v1beta1_stateful_set_update_strategy', 'kubernetes.client.models.v1beta1_storage_class', 'kubernetes.client.models.v1beta1_storage_class_list', 'kubernetes.client.models.v1beta1_subject', 'kubernetes.client.models.v1beta1_subject_access_review', 'kubernetes.client.models.v1beta1_subject_access_review_spec', 'kubernetes.client.models.v1beta1_subject_access_review_status', 'kubernetes.client.models.v1beta1_subject_rules_review_status', 'kubernetes.client.models.v1beta1_token_review', 'kubernetes.client.models.v1beta1_token_review_spec', 'kubernetes.client.models.v1beta1_token_review_status', 'kubernetes.client.models.v1beta1_user_info', 'kubernetes.client.models.v1beta1_validating_webhook', 'kubernetes.client.models.v1beta1_validating_webhook_configuration', 'kubernetes.client.models.v1beta1_validating_webhook_configuration_list', 'kubernetes.client.models.v1beta1_volume_attachment', 'kubernetes.client.models.v1beta1_volume_attachment_list', 'kubernetes.client.models.v1beta1_volume_attachment_source', 'kubernetes.client.models.v1beta1_volume_attachment_spec', 'kubernetes.client.models.v1beta1_volume_attachment_status', 'kubernetes.client.models.v1beta1_volume_error', 'kubernetes.client.models.v1beta2_controller_revision', 'kubernetes.client.models.v1beta2_controller_revision_list', 'kubernetes.client.models.v1beta2_daemon_set', 'kubernetes.client.models.v1beta2_daemon_set_condition', 'kubernetes.client.models.v1beta2_daemon_set_list', 'kubernetes.client.models.v1beta2_daemon_set_spec', 'kubernetes.client.models.v1beta2_daemon_set_status', 'kubernetes.client.models.v1beta2_daemon_set_update_strategy', 'kubernetes.client.models.v1beta2_deployment', 'kubernetes.client.models.v1beta2_deployment_condition', 'kubernetes.client.models.v1beta2_deployment_list', 'kubernetes.client.models.v1beta2_deployment_spec', 'kubernetes.client.models.v1beta2_deployment_status', 'kubernetes.client.models.v1beta2_deployment_strategy', 'kubernetes.client.models.v1beta2_replica_set', 'kubernetes.client.models.v1beta2_replica_set_condition', 'kubernetes.client.models.v1beta2_replica_set_list', 'kubernetes.client.models.v1beta2_replica_set_spec', 'kubernetes.client.models.v1beta2_replica_set_status', 'kubernetes.client.models.v1beta2_rolling_update_daemon_set', 'kubernetes.client.models.v1beta2_rolling_update_deployment', 'kubernetes.client.models.v1beta2_rolling_update_stateful_set_strategy', 'kubernetes.client.models.v1beta2_scale', 'kubernetes.client.models.v1beta2_scale_spec', 'kubernetes.client.models.v1beta2_scale_status', 'kubernetes.client.models.v1beta2_stateful_set', 'kubernetes.client.models.v1beta2_stateful_set_condition', 'kubernetes.client.models.v1beta2_stateful_set_list', 'kubernetes.client.models.v1beta2_stateful_set_spec', 'kubernetes.client.models.v1beta2_stateful_set_status', 'kubernetes.client.models.v1beta2_stateful_set_update_strategy', 'kubernetes.client.models.v2alpha1_cron_job', 'kubernetes.client.models.v2alpha1_cron_job_list', 'kubernetes.client.models.v2alpha1_cron_job_spec', 'kubernetes.client.models.v2alpha1_cron_job_status', 'kubernetes.client.models.v2alpha1_job_template_spec', 'kubernetes.client.models.v2beta1_cross_version_object_reference', 'kubernetes.client.models.v2beta1_external_metric_source', 'kubernetes.client.models.v2beta1_external_metric_status', 'kubernetes.client.models.v2beta1_horizontal_pod_autoscaler', 'kubernetes.client.models.v2beta1_horizontal_pod_autoscaler_condition', 'kubernetes.client.models.v2beta1_horizontal_pod_autoscaler_list', 'kubernetes.client.models.v2beta1_horizontal_pod_autoscaler_spec', 'kubernetes.client.models.v2beta1_horizontal_pod_autoscaler_status', 'kubernetes.client.models.v2beta1_metric_spec', 'kubernetes.client.models.v2beta1_metric_status', 'kubernetes.client.models.v2beta1_object_metric_source', 'kubernetes.client.models.v2beta1_object_metric_status', 'kubernetes.client.models.v2beta1_pods_metric_source', 'kubernetes.client.models.v2beta1_pods_metric_status', 'kubernetes.client.models.v2beta1_resource_metric_source', 'kubernetes.client.models.v2beta1_resource_metric_status', 'kubernetes.client.models.v2beta2_cross_version_object_reference', 'kubernetes.client.models.v2beta2_external_metric_source', 'kubernetes.client.models.v2beta2_external_metric_status', 'kubernetes.client.models.v2beta2_horizontal_pod_autoscaler', 'kubernetes.client.models.v2beta2_horizontal_pod_autoscaler_condition', 'kubernetes.client.models.v2beta2_horizontal_pod_autoscaler_list', 'kubernetes.client.models.v2beta2_horizontal_pod_autoscaler_spec', 'kubernetes.client.models.v2beta2_horizontal_pod_autoscaler_status', 'kubernetes.client.models.v2beta2_metric_identifier', 'kubernetes.client.models.v2beta2_metric_spec', 'kubernetes.client.models.v2beta2_metric_status', 'kubernetes.client.models.v2beta2_metric_target', 'kubernetes.client.models.v2beta2_metric_value_status', 'kubernetes.client.models.v2beta2_object_metric_source', 'kubernetes.client.models.v2beta2_object_metric_status', 'kubernetes.client.models.v2beta2_pods_metric_source', 'kubernetes.client.models.v2beta2_pods_metric_status', 'kubernetes.client.models.v2beta2_resource_metric_source', 'kubernetes.client.models.v2beta2_resource_metric_status', 'kubernetes.client.models.version_info', 'kubernetes.client.models', 'kubernetes.client.rest', 'kubernetes.client.api_client', 'kubernetes.client.api.admissionregistration_api', 'kubernetes.client.api.admissionregistration_v1beta1_api', 'kubernetes.client.api.apiextensions_api', 'kubernetes.client.api.apiextensions_v1beta1_api', 'kubernetes.client.api.apiregistration_api', 'kubernetes.client.api.apiregistration_v1_api', 'kubernetes.client.api.apiregistration_v1beta1_api', 'kubernetes.client.api.apis_api', 'kubernetes.client.api.apps_api', 'kubernetes.client.api.apps_v1_api', 'kubernetes.client.api.apps_v1beta1_api', 'kubernetes.client.api.apps_v1beta2_api', 'kubernetes.client.api.auditregistration_api', 'kubernetes.client.api.auditregistration_v1alpha1_api', 'kubernetes.client.api.authentication_api', 'kubernetes.client.api.authentication_v1_api', 'kubernetes.client.api.authentication_v1beta1_api', 'kubernetes.client.api.authorization_api', 'kubernetes.client.api.authorization_v1_api', 'kubernetes.client.api.authorization_v1beta1_api', 'kubernetes.client.api.autoscaling_api', 'kubernetes.client.api.autoscaling_v1_api', 'kubernetes.client.api.autoscaling_v2beta1_api', 'kubernetes.client.api.autoscaling_v2beta2_api', 'kubernetes.client.api.batch_api', 'kubernetes.client.api.batch_v1_api', 'kubernetes.client.api.batch_v1beta1_api', 'kubernetes.client.api.batch_v2alpha1_api', 'kubernetes.client.api.certificates_api', 'kubernetes.client.api.certificates_v1beta1_api', 'kubernetes.client.api.coordination_api', 'kubernetes.client.api.coordination_v1_api', 'kubernetes.client.api.coordination_v1beta1_api', 'kubernetes.client.api.core_api', 'kubernetes.client.api.core_v1_api', 'kubernetes.client.api.custom_objects_api', 'kubernetes.client.api.events_api', 'kubernetes.client.api.events_v1beta1_api', 'kubernetes.client.api.extensions_api', 'kubernetes.client.api.extensions_v1beta1_api', 'kubernetes.client.api.logs_api', 'kubernetes.client.api.networking_api', 'kubernetes.client.api.networking_v1_api', 'kubernetes.client.api.networking_v1beta1_api', 'kubernetes.client.api.node_api', 'kubernetes.client.api.node_v1alpha1_api', 'kubernetes.client.api.node_v1beta1_api', 'kubernetes.client.api.policy_api', 'kubernetes.client.api.policy_v1beta1_api', 'kubernetes.client.api.rbac_authorization_api', 'kubernetes.client.api.rbac_authorization_v1_api', 'kubernetes.client.api.rbac_authorization_v1alpha1_api', 'kubernetes.client.api.rbac_authorization_v1beta1_api', 'kubernetes.client.api.scheduling_api', 'kubernetes.client.api.scheduling_v1_api', 'kubernetes.client.api.scheduling_v1alpha1_api', 'kubernetes.client.api.scheduling_v1beta1_api', 'kubernetes.client.api.settings_api', 'kubernetes.client.api.settings_v1alpha1_api', 'kubernetes.client.api.storage_api', 'kubernetes.client.api.storage_v1_api', 'kubernetes.client.api.storage_v1alpha1_api', 'kubernetes.client.api.storage_v1beta1_api', 'kubernetes.client.api.version_api', 'kubernetes.client.api', 'kubernetes.client', 'kubernetes.config.config_exception', 'kubernetes.config.incluster_config', 'google.auth.version', 'google.auth.environment_vars', 'google.auth.exceptions', 'google.auth.transport', 'google.auth.transport._http_client', 'google.auth._default', 'google.auth', 'google.auth.transport._mtls_helper', 'google.oauth2', 'google.auth._helpers', 'google.auth.crypt.base', 'cryptography.__about__', 'cryptography.utils', 'cryptography', 'cryptography.exceptions', 'cryptography.hazmat', 'cryptography.hazmat.backends', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.hashes', 'cryptography.hazmat.primitives._serialization', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.bindings', 'cryptography.hazmat.bindings._rust', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives._asymmetric', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.asymmetric.types', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives._cipheralgorithm', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.algorithms', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'bcrypt', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.x509.certificate_transparency', 'cryptography.hazmat.primitives.constant_time', 'cryptography.x509.oid', 'cryptography.x509.name', 'cryptography.x509.general_name', 'cryptography.x509.extensions', 'cryptography.x509.base', 'cryptography.x509', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.bindings.openssl', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'cryptography.hazmat.bindings.openssl.binding', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'cryptography.hazmat.primitives.serialization.pkcs7', 'cryptography.hazmat.primitives.serialization.pkcs12', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl', 'google.auth.crypt._cryptography_rsa', 'google.auth.crypt.rsa', 'google.auth.crypt.es256', 'google.auth.crypt', 'google.auth._service_account_info', 'google.auth.credentials', 'cachetools.keys', 'cachetools', 'google.auth.jwt', 'google.auth._exponential_backoff', 'google.oauth2._client', 'google.oauth2.service_account', 'google.auth.transport.requests', 'oauthlib', 'secrets', 'oauthlib.common', 'oauthlib.oauth2.rfc6749.utils', 'oauthlib.oauth2.rfc6749.errors', 'oauthlib.oauth2.rfc6749.endpoints.base', 'oauthlib.oauth2.rfc6749.endpoints.authorization', 'oauthlib.oauth2.rfc6749.endpoints.introspect', 'oauthlib.uri_validate', 'oauthlib.oauth2.rfc6749.request_validator', 'oauthlib.oauth2.rfc6749.grant_types.base', 'oauthlib.oauth2.rfc6749.grant_types.authorization_code', 'oauthlib.oauth2.rfc6749.grant_types.client_credentials', 'oauthlib.oauth2.rfc6749.grant_types.implicit', 'oauthlib.oauth2.rfc6749.grant_types.refresh_token', 'oauthlib.oauth2.rfc6749.grant_types.resource_owner_password_credentials', 'oauthlib.oauth2.rfc6749.grant_types', 'oauthlib.oauth2.rfc6749.endpoints.revocation', 'oauthlib.oauth2.rfc6749.endpoints.token', 'oauthlib.oauth2.rfc6749.endpoints.metadata', 'oauthlib.oauth2.rfc6749.tokens', 'oauthlib.oauth2.rfc6749.endpoints.resource', 'oauthlib.oauth2.rfc6749.endpoints.pre_configured', 'oauthlib.oauth2.rfc6749.endpoints', 'oauthlib.oauth2.rfc6749', 'oauthlib.signals', 'oauthlib.oauth2.rfc6749.parameters', 'oauthlib.oauth2.rfc6749.clients.base', 'oauthlib.oauth2.rfc6749.clients.backend_application', 'oauthlib.oauth2.rfc6749.clients.legacy_application', 'oauthlib.oauth2.rfc6749.clients.mobile_application', 'oauthlib.oauth2.rfc6749.clients.service_application', 'oauthlib.oauth2.rfc6749.clients.web_application', 'oauthlib.oauth2.rfc6749.clients', 'oauthlib.oauth2.rfc8628', 'oauthlib.oauth2.rfc8628.clients.device', 'oauthlib.oauth2.rfc8628.clients', 'oauthlib.oauth2', 'oauthlib.oauth1.rfc5849.utils', 'oauthlib.oauth1.rfc5849.parameters', 'oauthlib.oauth1.rfc5849.signature', 'oauthlib.oauth1.rfc5849', 'oauthlib.oauth1.rfc5849.errors', 'oauthlib.oauth1.rfc5849.endpoints.base', 'oauthlib.oauth1.rfc5849.endpoints.access_token', 'oauthlib.oauth1.rfc5849.endpoints.authorization', 'oauthlib.oauth1.rfc5849.endpoints.request_token', 'oauthlib.oauth1.rfc5849.endpoints.resource', 'oauthlib.oauth1.rfc5849.endpoints.signature_only', 'oauthlib.oauth1.rfc5849.endpoints.pre_configured', 'oauthlib.oauth1.rfc5849.endpoints', 'oauthlib.oauth1.rfc5849.request_validator', 'oauthlib.oauth1', 'requests_oauthlib.oauth1_auth', 'requests_oauthlib.oauth1_session', 'requests_oauthlib.oauth2_auth', 'requests_oauthlib.oauth2_session', 'requests_oauthlib', 'kubernetes.config.exec_provider', 'kubernetes.config.dateutil', 'kubernetes.config.kube_config', 'kubernetes.config', 'kubernetes.watch.watch', 'kubernetes.watch', 'kubernetes.dynamic.exceptions', 'kubernetes.dynamic.resource', 'kubernetes.dynamic.discovery', 'kubernetes.dynamic.client', 'kubernetes.dynamic', 'websocket._exceptions', 'websocket._utils', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'websocket._abnf', 'websocket._cookiejar', 'websocket._logging', 'websocket._ssl_compat', 'websocket._socket', 'websocket._url', 'websocket._http', 'websocket._handshake', 'websocket._core', 'websocket._app', 'websocket', 'kubernetes.stream.ws_client', 'kubernetes.stream.stream', 'kubernetes.stream', 'kubernetes.utils.create_from_yaml', 'kubernetes.utils.quantity', 'kubernetes.utils', 'kubernetes', 'openshift.dynamic.exceptions', 'openshift.dynamic.apply', 'openshift.dynamic.resource', 'openshift.dynamic.discovery', 'openshift.dynamic.client', 'openshift.dynamic', 'thoth.common.openshift', 'argo', 'argo.workflows.client.configuration', 'argo.workflows.client.models.google_protobuf_any', 'argo.workflows.client.models.grpc_gateway_runtime_stream_error', 'argo.workflows.client.models.v1_aws_elastic_block_store_volume_source', 'argo.workflows.client.models.v1_affinity', 'argo.workflows.client.models.v1_azure_disk_volume_source', 'argo.workflows.client.models.v1_azure_file_volume_source', 'argo.workflows.client.models.v1_csi_volume_source', 'argo.workflows.client.models.v1_capabilities', 'argo.workflows.client.models.v1_ceph_fs_volume_source', 'argo.workflows.client.models.v1_cinder_volume_source', 'argo.workflows.client.models.v1_config_map_env_source', 'argo.workflows.client.models.v1_config_map_key_selector', 'argo.workflows.client.models.v1_config_map_projection', 'argo.workflows.client.models.v1_config_map_volume_source', 'argo.workflows.client.models.v1_container', 'argo.workflows.client.models.v1_container_port', 'argo.workflows.client.models.v1_create_options', 'argo.workflows.client.models.v1_downward_api_projection', 'argo.workflows.client.models.v1_downward_api_volume_file', 'argo.workflows.client.models.v1_downward_api_volume_source', 'argo.workflows.client.models.v1_empty_dir_volume_source', 'argo.workflows.client.models.v1_env_from_source', 'argo.workflows.client.models.v1_env_var', 'argo.workflows.client.models.v1_env_var_source', 'argo.workflows.client.models.v1_event', 'argo.workflows.client.models.v1_event_series', 'argo.workflows.client.models.v1_event_source', 'argo.workflows.client.models.v1_exec_action', 'argo.workflows.client.models.v1_fc_volume_source', 'argo.workflows.client.models.v1_flex_volume_source', 'argo.workflows.client.models.v1_flocker_volume_source', 'argo.workflows.client.models.v1_gce_persistent_disk_volume_source', 'argo.workflows.client.models.v1_git_repo_volume_source', 'argo.workflows.client.models.v1_glusterfs_volume_source', 'argo.workflows.client.models.v1_http_get_action', 'argo.workflows.client.models.v1_http_header', 'argo.workflows.client.models.v1_handler', 'argo.workflows.client.models.v1_host_alias', 'argo.workflows.client.models.v1_host_path_volume_source', 'argo.workflows.client.models.v1_iscsi_volume_source', 'argo.workflows.client.models.v1_initializer', 'argo.workflows.client.models.v1_initializers', 'argo.workflows.client.models.v1_key_to_path', 'argo.workflows.client.models.v1_label_selector', 'argo.workflows.client.models.v1_label_selector_requirement', 'argo.workflows.client.models.v1_lifecycle', 'argo.workflows.client.models.v1_list_meta', 'argo.workflows.client.models.v1_local_object_reference', 'argo.workflows.client.models.v1_managed_fields_entry', 'argo.workflows.client.models.v1_nfs_volume_source', 'argo.workflows.client.models.v1_node_affinity', 'argo.workflows.client.models.v1_node_selector', 'argo.workflows.client.models.v1_node_selector_requirement', 'argo.workflows.client.models.v1_node_selector_term', 'argo.workflows.client.models.v1_object_field_selector', 'argo.workflows.client.models.v1_object_meta', 'argo.workflows.client.models.v1_object_reference', 'argo.workflows.client.models.v1_owner_reference', 'argo.workflows.client.models.v1_persistent_volume_claim', 'argo.workflows.client.models.v1_persistent_volume_claim_condition', 'argo.workflows.client.models.v1_persistent_volume_claim_spec', 'argo.workflows.client.models.v1_persistent_volume_claim_status', 'argo.workflows.client.models.v1_persistent_volume_claim_volume_source', 'argo.workflows.client.models.v1_photon_persistent_disk_volume_source', 'argo.workflows.client.models.v1_pod_affinity', 'argo.workflows.client.models.v1_pod_affinity_term', 'argo.workflows.client.models.v1_pod_anti_affinity', 'argo.workflows.client.models.v1_pod_dns_config', 'argo.workflows.client.models.v1_pod_dns_config_option', 'argo.workflows.client.models.v1_pod_security_context', 'argo.workflows.client.models.v1_portworx_volume_source', 'argo.workflows.client.models.v1_preferred_scheduling_term', 'argo.workflows.client.models.v1_probe', 'argo.workflows.client.models.v1_projected_volume_source', 'argo.workflows.client.models.v1_quobyte_volume_source', 'argo.workflows.client.models.v1_rbd_volume_source', 'argo.workflows.client.models.v1_resource_field_selector', 'argo.workflows.client.models.v1_resource_requirements', 'argo.workflows.client.models.v1_se_linux_options', 'argo.workflows.client.models.v1_scale_io_volume_source', 'argo.workflows.client.models.v1_secret_env_source', 'argo.workflows.client.models.v1_secret_key_selector', 'argo.workflows.client.models.v1_secret_projection', 'argo.workflows.client.models.v1_secret_volume_source', 'argo.workflows.client.models.v1_security_context', 'argo.workflows.client.models.v1_service_account_token_projection', 'argo.workflows.client.models.v1_status', 'argo.workflows.client.models.v1_status_cause', 'argo.workflows.client.models.v1_status_details', 'argo.workflows.client.models.v1_storage_os_volume_source', 'argo.workflows.client.models.v1_sysctl', 'argo.workflows.client.models.v1_tcp_socket_action', 'argo.workflows.client.models.v1_toleration', 'argo.workflows.client.models.v1_typed_local_object_reference', 'argo.workflows.client.models.v1_volume', 'argo.workflows.client.models.v1_volume_device', 'argo.workflows.client.models.v1_volume_mount', 'argo.workflows.client.models.v1_volume_projection', 'argo.workflows.client.models.v1_vsphere_virtual_disk_volume_source', 'argo.workflows.client.models.v1_weighted_pod_affinity_term', 'argo.workflows.client.models.v1_windows_security_context_options', 'argo.workflows.client.models.v1alpha1_archive_strategy', 'argo.workflows.client.models.v1alpha1_arguments', 'argo.workflows.client.models.v1alpha1_artifact', 'argo.workflows.client.models.v1alpha1_artifact_location', 'argo.workflows.client.models.v1alpha1_artifact_repository_ref', 'argo.workflows.client.models.v1alpha1_artifactory_artifact', 'argo.workflows.client.models.v1alpha1_backoff', 'argo.workflows.client.models.v1alpha1_cache', 'argo.workflows.client.models.v1alpha1_cluster_workflow_template', 'argo.workflows.client.models.v1alpha1_cluster_workflow_template_create_request', 'argo.workflows.client.models.v1alpha1_cluster_workflow_template_lint_request', 'argo.workflows.client.models.v1alpha1_cluster_workflow_template_list', 'argo.workflows.client.models.v1alpha1_cluster_workflow_template_update_request', 'argo.workflows.client.models.v1alpha1_condition', 'argo.workflows.client.models.v1alpha1_continue_on', 'argo.workflows.client.models.v1alpha1_counter', 'argo.workflows.client.models.v1alpha1_create_cron_workflow_request', 'argo.workflows.client.models.v1alpha1_cron_workflow', 'argo.workflows.client.models.v1alpha1_cron_workflow_list', 'argo.workflows.client.models.v1alpha1_cron_workflow_spec', 'argo.workflows.client.models.v1alpha1_cron_workflow_status', 'argo.workflows.client.models.v1alpha1_dag_task', 'argo.workflows.client.models.v1alpha1_dag_template', 'argo.workflows.client.models.v1alpha1_event', 'argo.workflows.client.models.v1alpha1_executor_config', 'argo.workflows.client.models.v1alpha1_gcs_artifact', 'argo.workflows.client.models.v1alpha1_gauge', 'argo.workflows.client.models.v1alpha1_get_user_info_response', 'argo.workflows.client.models.v1alpha1_git_artifact', 'argo.workflows.client.models.v1alpha1_hdfs_artifact', 'argo.workflows.client.models.v1alpha1_http_artifact', 'argo.workflows.client.models.v1alpha1_histogram', 'argo.workflows.client.models.v1alpha1_info_response', 'argo.workflows.client.models.v1alpha1_inputs', 'argo.workflows.client.models.v1alpha1_link', 'argo.workflows.client.models.v1alpha1_lint_cron_workflow_request', 'argo.workflows.client.models.v1alpha1_log_entry', 'argo.workflows.client.models.v1alpha1_memoization_status', 'argo.workflows.client.models.v1alpha1_memoize', 'argo.workflows.client.models.v1alpha1_metadata', 'argo.workflows.client.models.v1alpha1_metric_label', 'argo.workflows.client.models.v1alpha1_metrics', 'argo.workflows.client.models.v1alpha1_mutex', 'argo.workflows.client.models.v1alpha1_mutex_holding', 'argo.workflows.client.models.v1alpha1_mutex_status', 'argo.workflows.client.models.v1alpha1_node_status', 'argo.workflows.client.models.v1alpha1_node_synchronization_status', 'argo.workflows.client.models.v1alpha1_oss_artifact', 'argo.workflows.client.models.v1alpha1_outputs', 'argo.workflows.client.models.v1alpha1_parameter', 'argo.workflows.client.models.v1alpha1_pod_gc', 'argo.workflows.client.models.v1alpha1_prometheus', 'argo.workflows.client.models.v1alpha1_raw_artifact', 'argo.workflows.client.models.v1alpha1_resource_template', 'argo.workflows.client.models.v1alpha1_retry_strategy', 'argo.workflows.client.models.v1alpha1_s3_artifact', 'argo.workflows.client.models.v1alpha1_script_template', 'argo.workflows.client.models.v1alpha1_semaphore_holding', 'argo.workflows.client.models.v1alpha1_semaphore_ref', 'argo.workflows.client.models.v1alpha1_semaphore_status', 'argo.workflows.client.models.v1alpha1_sequence', 'argo.workflows.client.models.v1alpha1_submit', 'argo.workflows.client.models.v1alpha1_submit_opts', 'argo.workflows.client.models.v1alpha1_suspend_template', 'argo.workflows.client.models.v1alpha1_synchronization', 'argo.workflows.client.models.v1alpha1_synchronization_status', 'argo.workflows.client.models.v1alpha1_ttl_strategy', 'argo.workflows.client.models.v1alpha1_tar_strategy', 'argo.workflows.client.models.v1alpha1_template', 'argo.workflows.client.models.v1alpha1_template_ref', 'argo.workflows.client.models.v1alpha1_update_cron_workflow_request', 'argo.workflows.client.models.v1alpha1_user_container', 'argo.workflows.client.models.v1alpha1_value_from', 'argo.workflows.client.models.v1alpha1_version', 'argo.workflows.client.models.v1alpha1_workflow', 'argo.workflows.client.models.v1alpha1_workflow_create_request', 'argo.workflows.client.models.v1alpha1_workflow_event_binding', 'argo.workflows.client.models.v1alpha1_workflow_event_binding_spec', 'argo.workflows.client.models.v1alpha1_workflow_lint_request', 'argo.workflows.client.models.v1alpha1_workflow_list', 'argo.workflows.client.models.v1alpha1_workflow_resubmit_request', 'argo.workflows.client.models.v1alpha1_workflow_resume_request', 'argo.workflows.client.models.v1alpha1_workflow_retry_request', 'argo.workflows.client.models.v1alpha1_workflow_set_request', 'argo.workflows.client.models.v1alpha1_workflow_spec', 'argo.workflows.client.models.v1alpha1_workflow_status', 'argo.workflows.client.models.v1alpha1_workflow_step', 'argo.workflows.client.models.v1alpha1_workflow_stop_request', 'argo.workflows.client.models.v1alpha1_workflow_submit_request', 'argo.workflows.client.models.v1alpha1_workflow_suspend_request', 'argo.workflows.client.models.v1alpha1_workflow_template', 'argo.workflows.client.models.v1alpha1_workflow_template_create_request', 'argo.workflows.client.models.v1alpha1_workflow_template_lint_request', 'argo.workflows.client.models.v1alpha1_workflow_template_list', 'argo.workflows.client.models.v1alpha1_workflow_template_ref', 'argo.workflows.client.models.v1alpha1_workflow_template_spec', 'argo.workflows.client.models.v1alpha1_workflow_template_update_request', 'argo.workflows.client.models.v1alpha1_workflow_terminate_request', 'argo.workflows.client.models.v1alpha1_workflow_watch_event', 'argo.workflows.client.models', 'argo.workflows.client.exceptions', 'argo.workflows.client.rest', 'argo.workflows.client.api_client', 'argo.workflows.client.api.v1alpha1_api', 'argo.workflows.client.api', 'argo.workflows.client.__about__', 'argo.workflows.client', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.async_case', 'mock.backports', 'mock.mock', 'mock', 'argo.workflows.config', 'argo.workflows.watch', 'argo.workflows', 'thoth.common.workflows', 'thoth.common', 'multidict._abc', 'multidict._multidict_base', 'multidict._multidict', 'multidict._compat', 'multidict', 'aiohttp.hdrs', 'yarl._quoting_c', 'yarl._quoting', 'yarl._url', 'yarl', 'aiohttp.typedefs', 'aiohttp.http_exceptions', 'aiohttp.tcp_helpers', 'aiohttp.base_protocol', 'netrc', 'async_timeout', 'aiohttp.log', 'aiohttp._helpers', 'aiohttp.helpers', 'aiohttp.abc', 'aiohttp._http_writer', 'aiohttp.http_writer', 'aiohttp.streams', '_cython_0_29_32', 'aiohttp._http_parser', 'aiohttp.http_parser', 'aiohttp._websocket', 'aiohttp.http_websocket', 'aiohttp.http', 'aiohttp.payload', 'aiohttp.client_exceptions', 'aiohttp.multipart', 'aiohttp.formdata', 'aiohttp.client_reqrep', 'aiohttp.client_ws', 'aiohttp.client_proto', 'aiohttp.locks', 'aiohttp.resolver', 'aiohttp.connector', 'aiohttp.cookiejar', 'frozenlist._frozenlist', 'frozenlist', 'aiosignal', 'aiohttp.tracing', 'aiohttp.client', 'aiohttp.payload_streamer', 'aiohttp', 'bs4.dammit', 'bs4.element', '_markupbase', 'html.parser', 'bs4.builder._htmlparser', 'lxml', 'lxml._elementpath', 'lxml.etree', 'bs4.builder._lxml', 'bs4.builder', 'bs4', 'thoth.python.exceptions', 'tarfile', 'elftools', 'elftools.elf', 'elftools.common', 'elftools.common.py3compat', 'elftools.common.exceptions', 'elftools.construct.lib.py3compat', 'elftools.construct.lib.binary', 'elftools.construct.lib.bitstream', 'elftools.construct.lib.container', 'elftools.construct.lib.hex', 'elftools.construct.lib', 'elftools.construct.core', 'elftools.construct.adapters', 'elftools.construct.macros', 'elftools.construct.debug', 'elftools.construct', 'elftools.common.utils', 'elftools.common.construct_utils', 'elftools.elf.enums', 'elftools.elf.structs', 'elftools.elf.constants', 'elftools.elf.notes', 'elftools.elf.sections', 'elftools.elf.hash', 'elftools.elf.segments', 'elftools.elf.relocation', 'elftools.elf.dynamic', 'elftools.elf.gnuversions', 'elftools.dwarf', 'elftools.dwarf.enums', 'elftools.dwarf.structs', 'elftools.dwarf.dwarf_util', 'elftools.dwarf.die', 'elftools.dwarf.compileunit', 'elftools.dwarf.abbrevtable', 'elftools.dwarf.constants', 'elftools.dwarf.lineprogram', 'elftools.dwarf.callframe', 'elftools.dwarf.locationlists', 'elftools.dwarf.ranges', 'elftools.dwarf.aranges', 'elftools.dwarf.namelut', 'elftools.dwarf.dwarfinfo', 'elftools.ehabi', 'elftools.ehabi.decoder', 'elftools.ehabi.constants', 'elftools.ehabi.structs', 'elftools.ehabi.ehabiinfo', 'elftools.elf.elffile', 'thoth.python.artifact', 'thoth.python.configuration', 'thoth.python.source', 'thoth.python.aiosource', 'packaging._manylinux', 'packaging._musllinux', 'packaging.tags', 'packaging.utils', 'thoth.python.package_version', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'packaging.specifiers', 'packaging.markers', 'packaging.requirements', 'thoth.python.helpers', 'thoth.python.constraints', 'thoth.python.digests_fetcher', 'thoth.python.packages', 'toml.tz', 'toml.decoder', 'toml.encoder', 'toml', 'thoth.python.pipfile', 'distro.distro', 'distro', 'thoth.analyzer.cli', 'pexpect.popen_spawn', 'delegator', 'thoth.analyzer.command', 'thoth.analyzer', 'thoth.python.project', 'thoth.python', 'platformdirs.api', 'platformdirs.version', 'platformdirs.macos', 'platformdirs', 'virtualenv.info', 'virtualenv.app_data.base', 'virtualenv.app_data.na', 'virtualenv.util', 'filelock._error', 'filelock._api', 'filelock._util', 'filelock._soft', 'filelock._unix', 'filelock._windows', 'filelock.version', 'filelock', 'virtualenv.util.lock', 'virtualenv.util.path._permission', 'virtualenv.util.path._sync', 'virtualenv.util.path._win', 'virtualenv.util.path', 'virtualenv.util.zipapp', 'virtualenv.version', 'virtualenv.app_data.via_disk_folder', 'virtualenv.app_data.read_only', 'virtualenv.app_data.via_tempdir', 'virtualenv.app_data', 'virtualenv.config', 'virtualenv.config.cli', 'virtualenv.config.convert', 'virtualenv.config.env_var', 'virtualenv.config.ini', 'virtualenv.config.cli.parser', 'virtualenv.report', 'virtualenv.run.session', 'virtualenv.seed', 'virtualenv.seed.wheels.util', 'virtualenv.seed.wheels.embed', 'virtualenv.util.subprocess', 'virtualenv.seed.wheels.periodic_update', 'virtualenv.seed.wheels.bundle', 'virtualenv.seed.wheels.acquire', 'virtualenv.seed.wheels', 'virtualenv.run.plugin', 'importlib.metadata', 'virtualenv.run.plugin.base', 'virtualenv.run.plugin.activators', 'virtualenv.create', 'virtualenv.create.describe', 'virtualenv.create.via_global_ref', 'virtualenv.create.via_global_ref.builtin', 'virtualenv.discovery', 'virtualenv.discovery.py_info', 'venv', 'setuptools.command.install', 'setuptools.command.build', 'virtualenv.discovery.cached_py_info', 'virtualenv.create.pyenv_cfg', 'virtualenv.create.creator', 'virtualenv.create.via_global_ref.builtin.builtin_way', 'virtualenv.run.plugin.creators', 'virtualenv.run.plugin.discovery', 'virtualenv.run.plugin.seeders', 'virtualenv.run', 'virtualenv', 'thamos.exceptions', 'thamos.utils', 'thamos.discover', 'thamos.config', 'jupyter_nbrequirements.magic_parser', 'jupyter_nbrequirements.__about__', 'invectio.lib', 'invectio', 'rich._extension', 'rich', 'markdown_it.common', 'markdown_it.common.entities', 'markdown_it.common.utils', 'markdown_it.helpers.parse_link_destination', 'markdown_it._compat', 'markdown_it.ruler', 'markdown_it.token', 'markdown_it.rules_inline.state_inline', 'markdown_it.rules_inline.emphasis', 'markdown_it.rules_inline.strikethrough', 'markdown_it.rules_inline.autolink', 'markdown_it.rules_inline.backticks', 'markdown_it.rules_inline.balance_pairs', 'markdown_it.rules_inline.entity', 'markdown_it.rules_inline.escape', 'markdown_it.common.html_re', 'markdown_it.rules_inline.html_inline', 'markdown_it.rules_inline.image', 'markdown_it.rules_inline.link', 'markdown_it.rules_inline.newline', 'markdown_it.rules_inline.text', 'markdown_it.rules_inline.text_collapse', 'markdown_it.rules_inline', 'markdown_it.helpers.parse_link_label', 'markdown_it.helpers.parse_link_title', 'markdown_it.helpers', 'markdown_it.presets.commonmark', 'markdown_it.presets.default', 'markdown_it.presets.zero', 'markdown_it.presets', 'mdurl._decode', 'mdurl._encode', 'mdurl._format', 'mdurl._url', 'mdurl._parse', 'mdurl', 'markdown_it._punycode', 'markdown_it.common.normalize_url', 'markdown_it.rules_block.state_block', 'markdown_it.rules_block.blockquote', 'markdown_it.rules_block.code', 'markdown_it.rules_block.fence', 'markdown_it.rules_block.heading', 'markdown_it.rules_block.hr', 'markdown_it.common.html_blocks', 'markdown_it.rules_block.html_block', 'markdown_it.rules_block.lheading', 'markdown_it.rules_block.list', 'markdown_it.rules_block.paragraph', 'markdown_it.rules_block.reference', 'markdown_it.rules_block.table', 'markdown_it.rules_block', 'markdown_it.parser_block', 'markdown_it.rules_core.state_core', 'markdown_it.rules_core.block', 'markdown_it.rules_core.inline', 'markdown_it.rules_core.linkify', 'markdown_it.rules_core.normalize', 'markdown_it.rules_core.replacements', 'markdown_it.rules_core.smartquotes', 'markdown_it.rules_core', 'markdown_it.parser_core', 'markdown_it.parser_inline', 'markdown_it.utils', 'markdown_it.renderer', 'markdown_it.main', 'markdown_it', 'rich._loop', 'rich.box', 'rich._stack', 'rich._null_file', 'rich.errors', 'rich.color_triplet', 'rich.palette', 'rich._palettes', 'rich.repr', 'rich.terminal_theme', 'rich.color', 'rich.style', 'rich.default_styles', 'rich.theme', 'rich.themes', 'rich._emoji_codes', 'rich._emoji_replace', 'rich._export_format', 'rich._fileno', 'rich._pick', 'rich._cell_widths', 'rich.cells', 'rich._wrap', 'rich.segment', 'rich.jupyter', 'rich.protocol', 'rich.measure', 'rich.constrain', 'rich.align', 'rich.containers', 'rich.control', 'rich.emoji', 'rich.text', 'rich._log_render', 'rich.highlighter', 'rich.markup', 'rich.pager', 'rich.abc', 'rich.pretty', 'rich.region', 'rich.padding', 'rich.panel', 'rich._ratio', 'rich.table', 'rich.scope', 'rich.screen', 'rich.styled', 'rich.console', 'rich.rule', 'rich.syntax', 'rich.markdown', 'rich.columns', 'rich_click.rich_click', 'rich_click.rich_command', 'rich_click.rich_group', 'rich_click', 'pip', 'pip._vendor', 'pip._vendor.packaging.__about__', 'pip._vendor.packaging', 'pip._vendor.pyparsing.util', 'pip._vendor.pyparsing.unicode', 'pip._vendor.pyparsing.exceptions', 'pip._vendor.pyparsing.actions', 'pip._vendor.pyparsing.results', 'pip._vendor.pyparsing.core', 'pip._vendor.pyparsing.helpers', 'pip._vendor.pyparsing.testing', 'pip._vendor.pyparsing.common', 'pip._vendor.pyparsing', 'pip._vendor.packaging._manylinux', 'pip._vendor.packaging._musllinux', 'pip._vendor.packaging.tags', 'pip._vendor.packaging._structures', 'pip._vendor.packaging.version', 'pip._vendor.packaging.utils', 'pip._vendor.packaging.specifiers', 'pip._vendor.packaging.markers', 'pip._vendor.packaging.requirements', 'pip._internal.utils', 'pip._internal.utils.inject_securetransport', 'pip._internal.utils._log', 'pip._internal', 'pip._vendor.rich._extension', 'pip._vendor.rich', 'pip._vendor.rich.errors', 'pip._vendor.rich.color_triplet', 'pip._vendor.rich.palette', 'pip._vendor.rich._palettes', 'pip._vendor.rich.repr', 'pip._vendor.rich.terminal_theme', 'pip._vendor.rich.color', 'pip._vendor.rich.style', 'pip._vendor.rich.default_styles', 'pip._vendor.rich.theme', 'pip._vendor.rich.themes', 'pip._vendor.rich._emoji_codes', 'pip._vendor.rich._emoji_replace', 'pip._vendor.rich._export_format', 'pip._vendor.rich._loop', 'pip._vendor.rich._pick', 'pip._vendor.rich._cell_widths', 'pip._vendor.rich.cells', 'pip._vendor.rich._wrap', 'pip._vendor.rich.segment', 'pip._vendor.rich.jupyter', 'pip._vendor.rich.protocol', 'pip._vendor.rich.measure', 'pip._vendor.rich.constrain', 'pip._vendor.rich.align', 'pip._vendor.rich.containers', 'pip._vendor.rich.control', 'pip._vendor.rich.emoji', 'pip._vendor.rich.text', 'pip._vendor.rich._log_render', 'pip._vendor.rich.highlighter', 'pip._vendor.rich.markup', 'pip._vendor.rich.pager', 'pip._vendor.rich.abc', 'pip._vendor.rich.pretty', 'pip._vendor.rich.region', 'pip._vendor.rich.box', 'pip._vendor.rich.padding', 'pip._vendor.rich.panel', 'pip._vendor.rich._ratio', 'pip._vendor.rich.table', 'pip._vendor.rich.scope', 'pip._vendor.rich.screen', 'pip._vendor.rich.styled', 'pip._vendor.rich.console', 'pip._vendor.pygments', 'pip._vendor.pygments.lexers._mapping', 'pip._vendor.pygments.modeline', 'pip._vendor.pygments.plugin', 'pip._vendor.pygments.util', 'pip._vendor.pygments.lexers', 'pip._vendor.pygments.token', 'pip._vendor.rich.columns', 'pip._vendor.pygments.filter', 'pip._vendor.pygments.filters', 'pip._vendor.pygments.regexopt', 'pip._vendor.pygments.lexer', 'pip._vendor.pygments.style', 'pip._vendor.pygments.styles', 'pip._vendor.rich.syntax', 'pip._vendor.rich.traceback', 'pip._vendor.rich.logging', 'pip._internal.utils.compat', 'pip._internal.utils.deprecation', 'pip._vendor.tomli._types', 'pip._vendor.tomli._re', 'pip._vendor.tomli._parser', 'pip._vendor.tomli', 'pip._vendor.pep517.compat', 'pip._vendor.pep517.in_process', 'pip._vendor.pep517.wrappers', 'pip._vendor.pep517', 'pip._vendor.tenacity.retry', 'pip._vendor.tenacity.nap', 'pip._vendor.tenacity.stop', 'pip._vendor.tenacity._utils', 'pip._vendor.tenacity.wait', 'pip._vendor.tenacity.before', 'pip._vendor.tenacity.after', 'pip._vendor.tenacity.before_sleep', 'pip._vendor.tenacity._asyncio', 'pip._vendor.tenacity', 'pip._vendor.urllib3.packages', 'pip._vendor.urllib3.packages.six', 'pip._vendor.urllib3.packages.six.moves', 'pip._vendor.urllib3.packages.six.moves.http_client', 'pip._vendor.urllib3.exceptions', 'pip._vendor.urllib3._version', 'pip._vendor.urllib3.contrib', 'pip._vendor.urllib3.contrib._appengine_environ', 'pip._vendor.urllib3.util.wait', 'pip._vendor.urllib3.util.connection', 'pip._vendor.urllib3.util.request', 'pip._vendor.urllib3.util.response', 'pip._vendor.urllib3.util.retry', 'pip._vendor.urllib3.util.url', 'pip._vendor.urllib3.util.ssltransport', 'pip._vendor.urllib3.util.ssl_', 'pip._vendor.urllib3.util.timeout', 'pip._vendor.urllib3.util', 'pip._vendor.urllib3.util.proxy', 'pip._vendor.urllib3._collections', 'pip._vendor.urllib3.util.ssl_match_hostname', 'pip._vendor.urllib3.connection', 'pip._vendor.urllib3.fields', 'pip._vendor.urllib3.filepost', 'pip._vendor.urllib3.packages.six.moves.urllib', 'pip._vendor.urllib3.packages.six.moves.urllib.parse', 'pip._vendor.urllib3.request', 'pip._vendor.urllib3.response', 'pip._vendor.urllib3.util.queue', 'pip._vendor.urllib3.connectionpool', 'pip._vendor.urllib3.poolmanager', 'pip._vendor.urllib3', 'pip._vendor.chardet.enums', 'pip._vendor.chardet.charsetprober', 'pip._vendor.chardet.charsetgroupprober', 'pip._vendor.chardet.codingstatemachine', 'pip._vendor.chardet.escsm', 'pip._vendor.chardet.escprober', 'pip._vendor.chardet.latin1prober', 'pip._vendor.chardet.big5freq', 'pip._vendor.chardet.euckrfreq', 'pip._vendor.chardet.euctwfreq', 'pip._vendor.chardet.gb2312freq', 'pip._vendor.chardet.jisfreq', 'pip._vendor.chardet.johabfreq', 'pip._vendor.chardet.chardistribution', 'pip._vendor.chardet.mbcharsetprober', 'pip._vendor.chardet.mbcssm', 'pip._vendor.chardet.big5prober', 'pip._vendor.chardet.cp949prober', 'pip._vendor.chardet.jpcntx', 'pip._vendor.chardet.eucjpprober', 'pip._vendor.chardet.euckrprober', 'pip._vendor.chardet.euctwprober', 'pip._vendor.chardet.gb2312prober', 'pip._vendor.chardet.johabprober', 'pip._vendor.chardet.sjisprober', 'pip._vendor.chardet.utf8prober', 'pip._vendor.chardet.mbcsgroupprober', 'pip._vendor.chardet.hebrewprober', 'pip._vendor.chardet.sbcharsetprober', 'pip._vendor.chardet.langbulgarianmodel', 'pip._vendor.chardet.langgreekmodel', 'pip._vendor.chardet.langhebrewmodel', 'pip._vendor.chardet.langrussianmodel', 'pip._vendor.chardet.langthaimodel', 'pip._vendor.chardet.langturkishmodel', 'pip._vendor.chardet.sbcsgroupprober', 'pip._vendor.chardet.utf1632prober', 'pip._vendor.chardet.universaldetector', 'pip._vendor.chardet.version', 'pip._vendor.chardet', 'pip._vendor.requests.compat', 'pip._vendor.requests.exceptions', 'pip._vendor.requests.packages.urllib3.packages', 'pip._vendor.requests.packages.urllib3.packages.six', 'pip._vendor.requests.packages.urllib3.packages.six.moves', 'pip._vendor.requests.packages.urllib3.packages.six.moves.http_client', 'pip._vendor.requests.packages.urllib3.exceptions', 'pip._vendor.requests.packages.urllib3._version', 'pip._vendor.requests.packages.urllib3.contrib', 'pip._vendor.requests.packages.urllib3.contrib._appengine_environ', 'pip._vendor.requests.packages.urllib3.util.wait', 'pip._vendor.requests.packages.urllib3.util.connection', 'pip._vendor.requests.packages.urllib3.util.request', 'pip._vendor.requests.packages.urllib3.util.response', 'pip._vendor.requests.packages.urllib3.util.retry', 'pip._vendor.requests.packages.urllib3.util.url', 'pip._vendor.requests.packages.urllib3.util.ssltransport', 'pip._vendor.requests.packages.urllib3.util.ssl_', 'pip._vendor.requests.packages.urllib3.util.timeout', 'pip._vendor.requests.packages.urllib3.util', 'pip._vendor.requests.packages.urllib3.util.proxy', 'pip._vendor.requests.packages.urllib3._collections', 'pip._vendor.requests.packages.urllib3.util.ssl_match_hostname', 'pip._vendor.requests.packages.urllib3.connection', 'pip._vendor.requests.packages.urllib3.fields', 'pip._vendor.requests.packages.urllib3.filepost', 'pip._vendor.requests.packages.urllib3.packages.six.moves.urllib', 'pip._vendor.requests.packages.urllib3.packages.six.moves.urllib.parse', 'pip._vendor.requests.packages.urllib3.request', 'pip._vendor.requests.packages.urllib3.response', 'pip._vendor.requests.packages.urllib3.util.queue', 'pip._vendor.requests.packages.urllib3.connectionpool', 'pip._vendor.requests.packages.urllib3.poolmanager', 'pip._vendor.requests.packages.urllib3', 'pip._vendor.idna.package_data', 'pip._vendor.idna.idnadata', 'pip._vendor.idna.intranges', 'pip._vendor.idna.core', 'pip._vendor.idna', 'pip._vendor.requests.packages.idna.package_data', 'pip._vendor.requests.packages.idna.idnadata', 'pip._vendor.requests.packages.idna.intranges', 'pip._vendor.requests.packages.idna.core', 'pip._vendor.requests.packages.idna', 'pip._vendor.requests.packages.chardet.enums', 'pip._vendor.requests.packages.chardet.charsetprober', 'pip._vendor.requests.packages.chardet.charsetgroupprober', 'pip._vendor.requests.packages.chardet.codingstatemachine', 'pip._vendor.requests.packages.chardet.escsm', 'pip._vendor.requests.packages.chardet.escprober', 'pip._vendor.requests.packages.chardet.latin1prober', 'pip._vendor.requests.packages.chardet.big5freq', 'pip._vendor.requests.packages.chardet.euckrfreq', 'pip._vendor.requests.packages.chardet.euctwfreq', 'pip._vendor.requests.packages.chardet.gb2312freq', 'pip._vendor.requests.packages.chardet.jisfreq', 'pip._vendor.requests.packages.chardet.johabfreq', 'pip._vendor.requests.packages.chardet.chardistribution', 'pip._vendor.requests.packages.chardet.mbcharsetprober', 'pip._vendor.requests.packages.chardet.mbcssm', 'pip._vendor.requests.packages.chardet.big5prober', 'pip._vendor.requests.packages.chardet.cp949prober', 'pip._vendor.requests.packages.chardet.jpcntx', 'pip._vendor.requests.packages.chardet.eucjpprober', 'pip._vendor.requests.packages.chardet.euckrprober', 'pip._vendor.requests.packages.chardet.euctwprober', 'pip._vendor.requests.packages.chardet.gb2312prober', 'pip._vendor.requests.packages.chardet.johabprober', 'pip._vendor.requests.packages.chardet.sjisprober', 'pip._vendor.requests.packages.chardet.utf8prober', 'pip._vendor.requests.packages.chardet.mbcsgroupprober', 'pip._vendor.requests.packages.chardet.hebrewprober', 'pip._vendor.requests.packages.chardet.sbcharsetprober', 'pip._vendor.requests.packages.chardet.langbulgarianmodel', 'pip._vendor.requests.packages.chardet.langgreekmodel', 'pip._vendor.requests.packages.chardet.langhebrewmodel', 'pip._vendor.requests.packages.chardet.langrussianmodel', 'pip._vendor.requests.packages.chardet.langthaimodel', 'pip._vendor.requests.packages.chardet.langturkishmodel', 'pip._vendor.requests.packages.chardet.sbcsgroupprober', 'pip._vendor.requests.packages.chardet.utf1632prober', 'pip._vendor.requests.packages.chardet.universaldetector', 'pip._vendor.requests.packages.chardet.version', 'pip._vendor.requests.packages.chardet', 'pip._vendor.requests.packages', 'pip._vendor.certifi.core', 'pip._vendor.certifi', 'pip._vendor.requests.certs', 'pip._vendor.requests.__version__', 'pip._vendor.requests._internal_utils', 'pip._vendor.requests.cookies', 'pip._vendor.requests.structures', 'pip._vendor.requests.utils', 'pip._vendor.requests.auth', 'pip._vendor.requests.hooks', 'pip._vendor.requests.status_codes', 'pip._vendor.requests.models', 'pip._vendor.urllib3.contrib.socks', 'pip._vendor.requests.adapters', 'pip._vendor.requests.sessions', 'pip._vendor.requests.api', 'pip._vendor.requests', 'pip._internal.exceptions', 'pip._internal.models', 'pip._internal.models.scheme', 'pip._internal.utils.virtualenv', 'pip._vendor.platformdirs.api', 'pip._vendor.platformdirs.version', 'pip._vendor.platformdirs.macos', 'pip._vendor.platformdirs', 'pip._internal.utils.appdirs', 'pip._internal.locations.base', 'pip._internal.locations._sysconfig', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'distutils.dir_util', 'distutils.file_util', 'distutils.archive_util', 'distutils.cmd', 'distutils.command', 'distutils.fancy_getopt', 'distutils.dist', 'distutils.config', 'distutils.extension', 'distutils.core', 'distutils.sysconfig', 'distutils.command.install', 'pip._internal.locations._distutils', 'pip._internal.locations', 'pip._internal.utils.misc', 'pip._internal.utils.logging', 'optparse', 'pip._internal.cli', 'pip._internal.cli.status_codes', 'pip._internal.configuration', 'pip._internal.cli.parser', 'pip._internal.models.format_control', 'pip._internal.models.index', 'pip._internal.utils.compatibility_tags', 'pip._internal.models.target_python', 'pip._internal.utils.hashes', 'pip._internal.cli.cmdoptions', 'pip._internal.models.search_scope', 'pip._internal.network', 'pip._vendor.cachecontrol.cache', 'pip._vendor.msgpack.exceptions', 'pip._vendor.msgpack.ext', 'pip._vendor.msgpack.fallback', 'pip._vendor.msgpack', 'pip._vendor.cachecontrol.compat', 'pip._vendor.cachecontrol.serialize', 'pip._vendor.cachecontrol.controller', 'mmap', 'pip._vendor.cachecontrol.filewrapper', 'pip._vendor.cachecontrol.adapter', 'pip._vendor.cachecontrol.wrapper', 'pip._vendor.cachecontrol', 'pip._internal.models.direct_url', 'pip._internal.utils.egg_link', 'pip._internal.utils.packaging', 'pip._internal.utils.urls', 'pip._internal.metadata._json', 'pip._internal.metadata.base', 'pip._internal.metadata', 'pip._internal.utils.filetypes', 'pip._internal.utils.models', 'pip._internal.models.link', 'pip._internal.cli.spinners', 'pip._internal.utils.subprocess', 'pip._internal.vcs.versioncontrol', 'pip._internal.vcs.bazaar', 'pip._internal.vcs.git', 'pip._internal.vcs.mercurial', 'pip._internal.vcs.subversion', 'pip._internal.vcs', 'keyring.credentials', 'keyring.errors', 'keyring.util', 'keyring.util.properties', 'keyring.backend', 'keyring.util.platform_', 'keyring.backends', 'keyring.backends.fail', 'keyring.core', 'keyring', 'pip._internal.network.auth', 'pip._vendor.cachecontrol.caches.file_cache', 'pip._vendor.cachecontrol.caches.redis_cache', 'pip._vendor.cachecontrol.caches', 'pip._internal.utils.filesystem', 'pip._internal.network.cache', 'pip._internal.utils.glibc', 'pip._internal.network.session', 'pip._internal.network.utils', 'pip._internal.utils.encoding', 'pip._internal.req.req_file', 'pip._internal.utils.temp_dir', 'pip._internal.build_env', 'pip._internal.operations', 'pip._internal.operations.build', 'pip._internal.operations.build.metadata', 'pip._internal.operations.build.metadata_editable', 'pip._internal.utils.setuptools_build', 'pip._internal.operations.build.metadata_legacy', 'pip._internal.operations.install', 'pip._internal.operations.install.editable_legacy', 'pip._internal.operations.install.legacy', 'py_compile', 'compileall', 'pip._vendor.distlib', 'pip._vendor.distlib.compat', 'pip._vendor.distlib.util', 'pip._vendor.distlib.resources', 'pip._vendor.distlib.scripts', 'pip._internal.utils.unpacking', 'pip._internal.utils.wheel', 'pip._internal.operations.install.wheel', 'pip._internal.pyproject', 'pip._internal.req.req_uninstall', 'pip._internal.utils.direct_url_helpers', 'pip._internal.req.req_install', 'pip._internal.req.req_set', 'pip._internal.req', 'pip._internal.index', 'xml.etree', 'xml.etree.ElementPath', 'pip._internal.models.candidate', 'pip._internal.index.sources', 'pip._internal.index.collector', 'pip._internal.models.selection_prefs', 'pip._internal.models.wheel', 'pip._internal.index.package_finder', 'micropipenv', 'termcolor.termcolor', 'termcolor', 'yaspin.base_spinner', 'yaspin.constants', 'yaspin.helpers', 'yaspin.core', 'yaspin.signal_handlers', 'yaspin.api', 'yaspin', 'yaspin.spinners', 'thamos.swagger_client.configuration', 'thamos.swagger_client.models.advise_input', 'thamos.swagger_client.models.advise_input_library_usage', 'thamos.swagger_client.models.adviser_result_response', 'thamos.swagger_client.models.adviser_result_response_metadata', 'thamos.swagger_client.models.adviser_result_response_metadata_distribution', 'thamos.swagger_client.models.adviser_result_response_metadata_distribution_version_parts', 'thamos.swagger_client.models.adviser_result_response_metadata_python', 'thamos.swagger_client.models.adviser_result_response_result', 'thamos.swagger_client.models.adviser_result_response_result_report', 'thamos.swagger_client.models.adviser_result_response_result_report_dependency_graph', 'thamos.swagger_client.models.adviser_result_response_result_report_pipeline', 'thamos.swagger_client.models.adviser_result_response_result_report_products', 'thamos.swagger_client.models.analysis_log_response', 'thamos.swagger_client.models.analysis_response', 'thamos.swagger_client.models.analysis_response_error', 'thamos.swagger_client.models.analysis_result_response', 'thamos.swagger_client.models.analysis_result_response_metadata', 'thamos.swagger_client.models.analysis_result_response_result', 'thamos.swagger_client.models.analysis_result_response_result_aicoeci', 'thamos.swagger_client.models.analysis_result_response_result_deb', 'thamos.swagger_client.models.analysis_result_response_result_debdependencies', 'thamos.swagger_client.models.analysis_result_response_result_pythonfiles', 'thamos.swagger_client.models.analysis_result_response_result_pythoninterpreters', 'thamos.swagger_client.models.analysis_result_response_result_pythonpackages', 'thamos.swagger_client.models.analysis_status_response', 'thamos.swagger_client.models.analysis_status_response_status', 'thamos.swagger_client.models.analysis_unauthorized_error', 'thamos.swagger_client.models.analysis_with_authentication_response', 'thamos.swagger_client.models.build', 'thamos.swagger_client.models.build_analysis_response', 'thamos.swagger_client.models.build_analysis_response_base_image_analysis', 'thamos.swagger_client.models.build_analysis_response_buildlog_analysis', 'thamos.swagger_client.models.build_analysis_response_error', 'thamos.swagger_client.models.build_analysis_response_error_base_image_analysis', 'thamos.swagger_client.models.build_analysis_response_error_build_log_analysis', 'thamos.swagger_client.models.build_build_log', 'thamos.swagger_client.models.callback_info', 'thamos.swagger_client.models.container_images_response', 'thamos.swagger_client.models.container_images_response_container_images', 'thamos.swagger_client.models.container_images_response_error', 'thamos.swagger_client.models.container_images_response_parameters', 'thamos.swagger_client.models.deb_dependency_item', 'thamos.swagger_client.models.image_metadata_response', 'thamos.swagger_client.models.justification', 'thamos.swagger_client.models.justification_inner', 'thamos.swagger_client.models.kebechet_metadata', 'thamos.swagger_client.models.kebechet_webhook_input', 'thamos.swagger_client.models.project_def', 'thamos.swagger_client.models.project_def_constraints', 'thamos.swagger_client.models.provenance_input', 'thamos.swagger_client.models.provenance_result_response', 'thamos.swagger_client.models.provenance_result_response_metadata', 'thamos.swagger_client.models.provenance_result_response_metadata_distribution', 'thamos.swagger_client.models.provenance_result_response_metadata_distribution_version_parts', 'thamos.swagger_client.models.provenance_result_response_result', 'thamos.swagger_client.models.provenance_result_response_result_parameters', 'thamos.swagger_client.models.python_environments', 'thamos.swagger_client.models.python_environments_environment', 'thamos.swagger_client.models.python_package_dependencies', 'thamos.swagger_client.models.python_package_dependencies_dependencies', 'thamos.swagger_client.models.python_package_dependencies_error', 'thamos.swagger_client.models.python_package_indexes', 'thamos.swagger_client.models.python_package_indexes_indexes', 'thamos.swagger_client.models.python_package_name_import_response', 'thamos.swagger_client.models.python_package_name_import_response_package_names', 'thamos.swagger_client.models.python_package_name_response_error', 'thamos.swagger_client.models.python_package_version_environments_response', 'thamos.swagger_client.models.python_package_version_metadata_response', 'thamos.swagger_client.models.python_package_version_metadata_response_error', 'thamos.swagger_client.models.python_package_version_metadata_response_metadata', 'thamos.swagger_client.models.python_package_version_metadata_response_metadata_importlib_metadata', 'thamos.swagger_client.models.python_package_version_metadata_response_metadata_importlib_metadata_entry_points', 'thamos.swagger_client.models.python_package_versions_response', 'thamos.swagger_client.models.python_package_versions_response_error', 'thamos.swagger_client.models.python_package_versions_response_versions', 'thamos.swagger_client.models.python_packages_response', 'thamos.swagger_client.models.python_packages_response_packages', 'thamos.swagger_client.models.python_platforms', 'thamos.swagger_client.models.python_stack', 'thamos.swagger_client.models.repo_init_input', 'thamos.swagger_client.models.requirements_def', 'thamos.swagger_client.models.requirements_lock_def', 'thamos.swagger_client.models.runtime_environment', 'thamos.swagger_client.models.runtime_environment_hardware', 'thamos.swagger_client.models.runtime_environment_operating_system', 'thamos.swagger_client.models.stack_info', 'thamos.swagger_client.models.unit_def', 'thamos.swagger_client.models', 'thamos.swagger_client.rest', 'thamos.swagger_client.api_client', 'thamos.swagger_client.thoth.advise_api', 'thamos.swagger_client.thoth.build_analysis_api', 'thamos.swagger_client.thoth.buildlogs_api', 'thamos.swagger_client.thoth.container_images_api', 'thamos.swagger_client.thoth.environments_api', 'thamos.swagger_client.thoth.image_analysis_api', 'thamos.swagger_client.thoth.kebechet_api', 'thamos.swagger_client.thoth.provenance_api', 'thamos.swagger_client.thoth.python_packages_api', 'thamos.swagger_client.thoth', 'thamos.swagger_client', 'thamos.lib', 'thamos.cli_config', 'thamos.cli', 'pip._internal.cli.command_context', 'pip._internal.cli.base_command', 'pip._internal.commands', 'pip._internal.cache', 'pip._internal.operations.build.build_tracker', 'pip._internal.distributions.base', 'pip._internal.distributions.sdist', 'pip._internal.distributions.wheel', 'pip._internal.distributions', 'pip._internal.distributions.installed', 'pip._vendor.rich.filesize', 'pip._vendor.rich.ansi', 'pip._vendor.rich.file_proxy', 'pip._vendor.rich.live_render', 'pip._vendor.rich.live', 'pip._vendor.rich.progress_bar', 'pip._vendor.rich._spinners', 'pip._vendor.rich.spinner', 'pip._vendor.rich.progress', 'pip._internal.cli.progress_bars', 'pip._internal.network.download', 'pip._internal.network.lazy_wheel', 'pip._internal.operations.prepare', 'pip._internal.req.constructors', 'pip._internal.resolution', 'pip._internal.resolution.base', 'pip._internal.cli.main_parser', 'pip._internal.cli.autocompletion', 'pip._internal.cli.main', 'pip._internal.utils.entrypoints', 'pip._internal.self_outdated_check', 'pip._internal.cli.req_command', 'pip._internal.commands.list', 'nltk.internals', 'nltk.metrics.distance', 'nltk.probability', 'nltk.metrics.agreement', 'nltk.metrics.aline', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy.stats._warnings_errors', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy._lib._util', 'scipy.sparse._sputils', 'scipy.sparse._base', 'scipy.sparse._sparsetools', 'scipy.sparse._data', 'scipy.sparse._index', 'scipy.sparse._compressed', 'scipy.sparse._csr', 'scipy.sparse._csc', 'scipy.sparse._csparsetools', 'scipy.sparse._lil', 'scipy.sparse._dok', 'scipy.sparse._coo', 'scipy.sparse._dia', 'scipy.sparse._bsr', 'scipy.sparse._construct', 'scipy.sparse._extract', 'scipy.sparse._matrix_io', 'scipy.sparse._arrays', 'scipy.sparse.linalg._isolve._iterative', 'scipy.sparse.linalg._interface', 'scipy.sparse.linalg._isolve.utils', 'scipy._lib.decorator', 'scipy._lib._threadsafety', 'scipy.sparse.linalg._isolve.iterative', 'scipy.sparse.linalg._isolve.minres', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg._misc', 'scipy.linalg._cythonized_array_utils', 'scipy.linalg._flinalg', 'scipy.linalg._flinalg_py', 'scipy.linalg._decomp', 'scipy.linalg._decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg._basic', 'scipy.linalg._decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg._decomp_cholesky', 'scipy.linalg._decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg._decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg._special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.cython_lapack', 'scipy.linalg.cython_blas', 'scipy.linalg._matfuncs_expm', 'scipy.linalg._matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg.decomp', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_lu', 'scipy.linalg.decomp_qr', 'scipy.linalg.decomp_svd', 'scipy.linalg.decomp_schur', 'scipy.linalg.basic', 'scipy.linalg.misc', 'scipy.linalg.special_matrices', 'scipy.linalg.flinalg', 'scipy.linalg.matfuncs', 'scipy.linalg', 'scipy.sparse.linalg._isolve._gcrotmk', 'scipy.sparse.linalg._isolve.lgmres', 'scipy.sparse.linalg._isolve.lsqr', 'scipy.sparse.linalg._isolve.lsmr', 'scipy.sparse.linalg._isolve.tfqmr', 'scipy.sparse.linalg._isolve', 'scipy.sparse.linalg._dsolve._superlu', 'scipy.sparse.linalg._dsolve.linsolve', 'scipy.sparse.linalg._dsolve._add_newdocs', 'scipy.sparse.linalg._dsolve', 'scipy.sparse.linalg._eigen.arpack._arpack', 'scipy.sparse.linalg._eigen.arpack.arpack', 'scipy.sparse.linalg._eigen.arpack', 'scipy.sparse.linalg._eigen.lobpcg.lobpcg', 'scipy.sparse.linalg._eigen.lobpcg', 'scipy.sparse.linalg._eigen._svds', 'scipy.sparse.linalg._eigen', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._matfuncs', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse.base', 'scipy.sparse.bsr', 'scipy.sparse.compressed', 'scipy.sparse.construct', 'scipy.sparse.coo', 'scipy.sparse.csc', 'scipy.sparse.csr', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse.dok', 'scipy.sparse.extract', 'scipy.sparse.lil', 'scipy.sparse.sparsetools', 'scipy.sparse.sputils', 'scipy.sparse', 'scipy.spatial._ckdtree', 'scipy.spatial._kdtree', 'scipy._lib.messagestream', 'scipy.spatial._qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special._sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special._specfun', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special._orthogonal', 'scipy.special._spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special._add_newdocs', 'scipy.special.add_newdocs', 'scipy.special.basic', 'scipy.special.orthogonal', 'scipy.special.specfun', 'scipy.special.sf_error', 'scipy.special.spfun_stats', 'scipy.special', 'scipy.spatial._distance_pybind', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.spatial.ckdtree', 'scipy.spatial.kdtree', 'scipy.spatial.qhull', 'scipy.constants._codata', 'scipy.constants._constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform._rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage._filters', 'scipy.ndimage._fourier', 'scipy.ndimage._interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage._morphology', 'scipy.ndimage._measurements', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.ndimage.measurements', 'scipy.ndimage.morphology', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize._minpack2', 'scipy.optimize._linesearch', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize._optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize._lbfgsb_py', '_moduleTNC', 'scipy.optimize._moduleTNC', 'scipy.optimize._tnc', 'scipy.optimize._cobyla', 'scipy.optimize._cobyla_py', 'scipy.optimize._slsqp', 'scipy.optimize._slsqp_py', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize._minpack_py', 'scipy.optimize._spectral', 'scipy.optimize._nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize._zeros_py', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._highs', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._linprog_highs', 'scipy.linalg._interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg.interpolative', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog_doc', 'scipy.optimize._linprog', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.optimize._direct', 'scipy.optimize._direct_py', 'scipy.optimize._milp', 'scipy.optimize.cobyla', 'scipy.optimize.lbfgsb', 'scipy.optimize.linesearch', 'scipy.optimize.minpack', 'scipy.optimize.minpack2', 'scipy.optimize.moduleTNC', 'scipy.optimize.nonlin', 'scipy.optimize.optimize', 'scipy.optimize.slsqp', 'scipy.optimize.tnc', 'scipy.optimize.zeros', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate._odepack_py', 'scipy.integrate._quadpack', 'scipy.integrate._quadpack_py', 'scipy.integrate._vode', 'scipy.integrate._dop', 'scipy.integrate._lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate.dop', 'scipy.integrate.lsoda', 'scipy.integrate.vode', 'scipy.integrate.odepack', 'scipy.integrate.quadpack', 'scipy.integrate', 'scipy.misc._common', 'scipy.misc.common', 'scipy.misc.doccer', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'beta_ufunc', 'scipy.stats._boost.beta_ufunc', 'binom_ufunc', 'scipy.stats._boost.binom_ufunc', 'nbinom_ufunc', 'scipy.stats._boost.nbinom_ufunc', 'hypergeom_ufunc', 'scipy.stats._boost.hypergeom_ufunc', 'ncf_ufunc', 'scipy.stats._boost.ncf_ufunc', 'scipy.stats._boost', 'scipy.stats._continuous_distns', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate._fitpack_py', 'scipy.interpolate._polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate._fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate._interpolate', 'scipy.interpolate._rbf', 'scipy.interpolate._rbfinterp_pythran', 'scipy.interpolate._rbfinterp', 'scipy.interpolate._cubic', 'scipy.interpolate._ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate._rgi', 'scipy.interpolate.fitpack', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpolate', 'scipy.interpolate.ndgriddata', 'scipy.interpolate.polyint', 'scipy.interpolate.rbf', 'scipy.interpolate', 'scipy.stats._biasedurn', 'scipy.stats._discrete_distns', 'scipy.stats._levy_stable.levyst', 'scipy.stats._levy_stable', 'scipy.stats._entropy', 'scipy.stats.distributions', 'scipy._lib._bunch', 'scipy.stats._stats_mstats_common', 'scipy.stats._mstats_basic', 'scipy.stats._common', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.fft._fftlog_multimethods', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy.stats._hypotests_pythran', 'scipy.stats._hypotests', 'scipy._lib._docscrape', 'scipy.stats._axis_nan_policy', 'scipy.stats._resampling', 'scipy.stats._binomtest', 'scipy.stats._stats_py', 'scipy.stats._variation', 'scipy.stats._statlib', 'scipy.stats._relative_risk', 'scipy.stats._crosstab', 'scipy.stats.contingency', 'scipy.stats._morestats', 'scipy.stats._binned_statistic', 'scipy.stats._mvn', 'scipy.stats._kde', 'scipy.stats._mstats_extras', 'scipy.stats.mstats', 'scipy.stats._sobol', 'scipy.stats._qmc_cy', 'scipy.stats._qmc', 'scipy.stats.qmc', 'scipy.stats._multivariate', 'scipy.stats._unuran', 'scipy.stats._unuran.unuran_wrapper', 'scipy.stats._rvs_sampling', 'scipy.stats._page_trend_test', 'scipy.stats._mannwhitneyu', 'scipy.stats._fit', 'scipy.stats.biasedurn', 'scipy.stats.kde', 'scipy.stats.morestats', 'scipy.stats.mstats_basic', 'scipy.stats.mstats_extras', 'scipy.stats.mvn', 'scipy.stats.statlib', 'scipy.stats.stats', 'scipy.stats', 'nltk.metrics.association', 'nltk.metrics.confusionmatrix', 'nltk.metrics.paice', 'nltk.collections', 'nltk.util', 'nltk.metrics.scores', 'nltk.metrics.segmentation', 'nltk.metrics.spearman', 'nltk.metrics', 'nltk.collocations', 'nltk.decorators', 'nltk.sem.logic', '_tkinter', 'tkinter.constants', 'tkinter', 'tkinter.font', 'nltk.sem.drt', 'nltk.sem.boxer', 'nltk.sem.evaluate', 'nltk.sem.lfg', 'nltk.sem.relextract', 'nltk.sem.skolemize', 'nltk.sem.util', 'nltk.sem', 'nltk.featstruct', 'nltk.grammar', 'nltk.lm.counter', 'nltk.lm.util', 'nltk.lm.vocabulary', 'nltk.lm.api', 'nltk.lm.smoothing', 'nltk.lm.models', 'nltk.lm', 'nltk.lm.preprocessing', 'nltk.compat', 'nltk.data', 'regex._regex', 'regex._regex_core', 'regex.regex', 'regex', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.xmlreader', 'xml.sax', 'xml.sax.saxutils', 'nltk.tokenize.util', 'nltk.tokenize.api', 'nltk.tokenize.casual', 'nltk.tokenize.destructive', 'nltk.tokenize.legality_principle', 'nltk.tokenize.mwe', 'nltk.tokenize.punkt', 'nltk.tokenize.regexp', 'nltk.tokenize.repp', 'nltk.tokenize.sexpr', 'nltk.tokenize.simple', 'nltk.tokenize.sonority_sequencing', 'nltk.tokenize.stanford_segmenter', 'nltk.tokenize.texttiling', 'nltk.tokenize.toktok', 'nltk.tokenize.treebank', 'nltk.tokenize', 'nltk.text', 'nltk.jsontags', 'nltk.tag.util', 'nltk.tag.api', 'nltk.classify.api', 'nltk.classify.decisiontree', 'nltk.classify.megam', 'nltk.classify.tadm', 'nltk.classify.util', 'nltk.classify.maxent', 'nltk.classify.naivebayes', 'nltk.classify.positivenaivebayes', 'nltk.classify.rte_classify', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'sklearn.utils.murmurhash', 'sklearn.utils.class_weight', 'joblib.hashing', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'distutils.version', 'joblib.backports', 'lz4.version', 'lz4._version', 'lz4', 'lz4.frame._frame', 'lz4.frame', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'joblib.externals.loky.backend.compat_posix', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._posix_reduction', 'joblib.externals.cloudpickle.compat', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'joblib.externals.loky.backend.utils', 'joblib.externals.loky.initializers', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'sklearn.utils._joblib', 'sklearn.utils.deprecation', 'sklearn.exceptions', 'threadpoolctl', 'sklearn.externals', 'sklearn.externals._packaging', 'sklearn.externals._packaging._structures', 'sklearn.externals._packaging.version', 'sklearn.utils.fixes', 'sklearn.utils._estimator_html_repr', 'sklearn.utils.validation', 'sklearn.utils', 'sklearn.utils._tags', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.feature_extraction._dict_vectorizer', 'sklearn.feature_extraction._hashing_fast', 'sklearn.feature_extraction._hash', 'sklearn.feature_extraction.image', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', '_cython_0_29_25', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.utils._mask', 'sklearn.utils._encode', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._discretization', 'sklearn.utils.stats', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.preprocessing._polynomial', 'sklearn.preprocessing', 'sklearn.feature_extraction._stop_words', 'sklearn.feature_extraction.text', 'sklearn.feature_extraction', 'nltk.classify.scikitlearn', 'nltk.classify.senna', 'nltk.classify.textcat', 'nltk.classify.weka', 'nltk.classify', 'nltk.tag.sequential', 'nltk.tbl.feature', 'nltk.tbl.rule', 'nltk.tbl.template', 'nltk.tbl.erroranalysis', 'nltk.tbl', 'nltk.tag.brill', 'nltk.tag.brill_trainer', 'nltk.tag.tnt', 'nltk.tag.hunpos', 'nltk.tag.stanford', 'nltk.tag.hmm', 'nltk.tag.senna', 'nltk.tag.mapping', 'nltk.tag.crf', 'nltk.tag.perceptron', 'nltk.tag', 'nltk.tree.tree', 'nltk.tree.parented', 'nltk.tree.immutable', 'nltk.tree.parsing', 'nltk.tree.prettyprinter', 'nltk.tree.probabilistic', 'nltk.tree.transforms', 'nltk.tree', 'nltk.chunk.util', 'nltk.parse.api', 'nltk.parse.bllip', 'nltk.parse.chart', 'nltk.parse.dependencygraph', 'nltk.parse.corenlp', 'nltk.parse.featurechart', 'nltk.parse.earleychart', 'nltk.parse.evaluate', 'nltk.parse.pchart', 'nltk.parse.util', 'nltk.parse.malt', 'nltk.parse.nonprojectivedependencyparser', 'nltk.parse.projectivedependencyparser', 'nltk.parse.recursivedescent', 'nltk.parse.shiftreduce', 'sklearn.utils._cython_blas', 'sklearn.svm._libsvm', 'sklearn.svm._liblinear', 'sklearn.svm._libsvm_sparse', 'sklearn.utils.metaestimators', 'sklearn.svm._base', 'sklearn.utils._random', 'sklearn.utils._seq_dataset', 'sklearn.linear_model._base', 'sklearn.linear_model._bayes', 'sklearn.utils.arrayfuncs', 'sklearn.model_selection._split', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.utils._typedefs', 'sklearn.utils._readonly_array_wrapper', 'sklearn.metrics._dist_metrics', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.det_curve', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics', 'sklearn.model_selection._validation', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection', 'sklearn.linear_model._least_angle', 'sklearn.linear_model._cd_fast', 'sklearn.linear_model._coordinate_descent', 'sklearn.utils.optimize', 'sklearn.linear_model._glm.link', 'sklearn.linear_model._glm.glm', 'sklearn.linear_model._glm', 'sklearn.linear_model._huber', 'sklearn.utils._weight_vector', 'sklearn.linear_model._sgd_fast', 'sklearn.linear_model._stochastic_gradient', 'sklearn.linear_model._sag_fast', 'sklearn.linear_model._sag', 'sklearn.linear_model._ridge', 'sklearn.linear_model._logistic', 'sklearn.linear_model._omp', 'sklearn.linear_model._passive_aggressive', 'sklearn.linear_model._perceptron', 'sklearn.linear_model._quantile', 'sklearn.linear_model._ransac', 'sklearn.linear_model._theil_sen', 'sklearn.linear_model', 'sklearn.svm._classes', 'sklearn.svm._bounds', 'sklearn.svm', 'sklearn.datasets._base', 'sklearn.datasets._covtype', 'sklearn.datasets._kddcup99', 'sklearn.datasets._lfw', 'sklearn.datasets._twenty_newsgroups', 'sklearn.externals._arff', 'sklearn.datasets._openml', 'sklearn.datasets._samples_generator', 'sklearn.datasets._svmlight_format_fast', 'sklearn.datasets._svmlight_format_io', 'scipy.io.matlab._byteordercodes', 'scipy.io.matlab._miobase', 'scipy.io.matlab._mio_utils', 'scipy.io.matlab._mio4', 'scipy.io.matlab._streams', 'scipy.io.matlab._mio5_params', 'scipy.io.matlab._mio5_utils', 'scipy.io.matlab._mio5', 'scipy.io.matlab._mio', 'scipy.io.matlab.mio', 'scipy.io.matlab.mio5', 'scipy.io.matlab.mio5_params', 'scipy.io.matlab.mio4', 'scipy.io.matlab.byteordercodes', 'scipy.io.matlab.miobase', 'scipy.io.matlab.mio_utils', 'scipy.io.matlab.streams', 'scipy.io.matlab.mio5_utils', 'scipy.io.matlab', 'scipy.io._netcdf', 'scipy.io._fortran', 'scipy.io._mmio', 'scipy.io._idl', 'scipy.io._harwell_boeing._fortran_format_parser', 'scipy.io._harwell_boeing.hb', 'scipy.io._harwell_boeing', 'scipy.io.arff._arffread', 'scipy.io.arff.arffread', 'scipy.io.arff', 'scipy.io.harwell_boeing', 'scipy.io.idl', 'scipy.io.mmio', 'scipy.io.netcdf', 'scipy.io.wavfile', 'scipy.io', 'sklearn.datasets._olivetti_faces', 'sklearn.datasets._species_distributions', 'sklearn.datasets._california_housing', 'sklearn.datasets._rcv1', 'sklearn.datasets', 'nltk.parse.transitionparser', 'nltk.parse.viterbi', 'nltk.parse', 'nltk.chunk.api', 'nltk.chunk.regexp', 'nltk.chunk', 'nltk.inference.api', 'nltk.inference.prover9', 'nltk.inference.mace', 'nltk.sem.linearlogic', 'nltk.sem.glue', 'nltk.inference.discourse', 'nltk.inference.resolution', 'nltk.inference.tableau', 'nltk.inference', 'nltk.translate.api', 'nltk.translate.ibm_model', 'nltk.translate.ibm1', 'nltk.translate.ibm2', 'nltk.translate.ibm3', 'nltk.translate.ibm4', 'nltk.translate.ibm5', 'nltk.translate.bleu_score', 'nltk.translate.ribes_score', 'nltk.corpus.reader.util', 'nltk.corpus.reader.api', 'nltk.corpus.reader.plaintext', 'nltk.corpus.reader.timit', 'nltk.corpus.reader.tagged', 'nltk.corpus.reader.cmudict', 'nltk.corpus.reader.conll', 'nltk.corpus.reader.bracket_parse', 'nltk.corpus.reader.chunked', 'nltk.corpus.reader.wordlist', 'nltk.corpus.reader.xmldocs', 'nltk.corpus.reader.ppattach', 'nltk.corpus.reader.senseval', 'nltk.corpus.reader.ieer', 'nltk.corpus.reader.sinica_treebank', 'nltk.corpus.reader.indian', 'nltk.toolbox', 'nltk.corpus.reader.toolbox', 'nltk.corpus.reader.ycoe', 'nltk.corpus.reader.rte', 'nltk.corpus.reader.string_category', 'nltk.corpus.reader.propbank', 'nltk.corpus.reader.verbnet', 'nltk.corpus.reader.bnc', 'nltk.corpus.reader.nps_chat', 'nltk.corpus.reader.wordnet', 'nltk.corpus.reader.switchboard', 'nltk.corpus.reader.dependency', 'nltk.corpus.reader.nombank', 'nltk.corpus.reader.ipipan', 'nltk.corpus.reader.pl196x', 'nltk.corpus.reader.knbc', 'nltk.corpus.reader.chasen', 'nltk.corpus.reader.childes', 'nltk.corpus.reader.aligned', 'nltk.corpus.reader.lin', 'nltk.corpus.reader.semcor', 'nltk.corpus.reader.framenet', 'nltk.corpus.reader.udhr', 'nltk.corpus.reader.sentiwordnet', 'nltk.corpus.reader.twitter', 'nltk.corpus.reader.nkjp', 'nltk.corpus.reader.crubadan', 'nltk.corpus.reader.mte', 'nltk.corpus.reader.reviews', 'nltk.corpus.reader.opinion_lexicon', 'nltk.corpus.reader.pros_cons', 'nltk.corpus.reader.categorized_sents', 'nltk.corpus.reader.comparative_sents', 'nltk.corpus.reader.panlex_lite', 'nltk.corpus.reader.panlex_swadesh', 'nltk.corpus.reader.bcp47', 'nltk.corpus.reader', 'nltk.corpus.util', 'nltk.corpus', 'nltk.stem.api', 'nltk.stem.arlstem', 'nltk.stem.arlstem2', 'nltk.stem.cistem', 'nltk.stem.isri', 'nltk.stem.lancaster', 'nltk.stem.porter', 'nltk.stem.regexp', 'nltk.stem.rslp', 'nltk.stem.util', 'nltk.stem.snowball', 'nltk.stem.wordnet', 'nltk.stem', 'nltk.translate.meteor_score', 'nltk.translate.metrics', 'nltk.translate.stack_decoder', 'nltk.translate.nist_score', 'nltk.translate.chrf_score', 'nltk.translate.gale_church', 'nltk.translate.gdfa', 'nltk.translate.gleu_score', 'nltk.translate.phrase_based', 'nltk.translate', 'nltk.lazyimport', 'nltk.cluster.api', 'nltk.cluster.util', 'nltk.cluster.em', 'nltk.cluster.gaac', 'nltk.cluster.kmeans', 'nltk.cluster', 'tkinter.commondialog', 'tkinter.messagebox', 'tkinter.dialog', 'tkinter.simpledialog', 'tkinter.filedialog', 'nltk.draw.util', 'nltk.draw.tree', 'nltk.draw.cfg', 'nltk.draw.table', 'nltk.draw.dispersion', 'nltk.draw', 'nltk.downloader', 'nltk.ccg.api', 'nltk.ccg.combinator', 'nltk.ccg.lexicon', 'nltk.ccg.logic', 'nltk.ccg.chart', 'nltk.ccg', 'nltk.help', 'nltk.misc.babelfish', 'nltk.misc.chomsky', 'nltk.misc.minimalset', 'nltk.misc.wordfinder', 'nltk.misc', 'nltk.wsd', 'nltk', 'jupyter_require', 'jupyter_nbrequirements', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._version', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._deprecate', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib.ft2font', 'kiwisolver._cext', 'kiwisolver']
2023-05-10 17:14:01,429 [1160] DEBUG    matplotlib:275: [JupyterRequire] CACHEDIR=/Users/teaching/.matplotlib
2023-05-10 17:14:01,430 [1160] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /Users/teaching/.matplotlib/fontlist-v330.json
2023-05-10 17:14:01,742 [1160] DEBUG    matplotlib.pyplot:301: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-05-10 17:14:01,745 [1160] DEBUG    matplotlib.pyplot:301: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-05-10 17:14:01,746 [1160] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-05-10 17:14:01,747 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,748 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-05-10 17:14:01,749 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2023-05-10 17:14:01,750 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,751 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,752 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,753 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,754 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,755 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,756 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,757 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,758 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,759 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,760 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-05-10 17:14:01,760 [1160] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,873 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,874 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,875 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-05-10 17:14:01,876 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,877 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,878 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-05-10 17:14:01,879 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,880 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,881 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,882 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-05-10 17:14:01,883 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,884 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,885 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-05-10 17:14:01,886 [1160] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/teaching/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-05-10 21:11:41,481 [1160] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/builtins.pyi
2023-05-10 21:11:41,516 [1160] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-05-10 22:00:13,019 [1160] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-10 22:00:13,021 [1160] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 1
2023-05-10 22:00:13,022 [1160] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:11] new[1:1]
2023-05-10 22:00:13,023 [1160] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-05-10 22:00:13,023 [1160] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-10 22:00:14,800 [1160] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-10 22:00:14,801 [1160] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-05-10 22:00:14,801 [1160] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-05-10 22:00:14,802 [1160] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-05-10 22:00:14,802 [1160] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-10 22:00:23,490 [1160] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-10 22:00:23,491 [1160] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-05-10 22:00:23,491 [1160] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-05-10 22:00:23,493 [1160] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-05-10 22:00:23,493 [1160] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-10 22:03:43,581 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/2183553068.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  random.sample(text1_filter,1)

2023-05-10 22:12:35,842 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/4061995359.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)

2023-05-10 22:12:35,848 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/4061995359.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)

2023-05-10 22:12:55,720 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/2681103616.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:12:55,729 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/2681103616.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:13:30,653 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/2681103616.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:13:30,664 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/2681103616.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:13:35,905 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:13:35,915 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:13:39,686 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:13:39,694 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:13:42,500 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:13:42,510 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:13:45,016 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:13:45,027 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/1179110547.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:13:58,582 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/187506020.py:3: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w1 = random.sample(text1_filter,1)[0]

2023-05-10 22:13:58,592 [1160] WARNING  py.warnings:109: [JupyterRequire] /var/folders/hj/xyjyq1ds11n1ycjbp53_4svw0000gp/T/ipykernel_1160/187506020.py:4: DeprecationWarning: Sampling from a set deprecated
since Python 3.9 and will be removed in a subsequent version.
  w2 = random.sample(text2_filter,1)[0]

2023-05-10 22:22:40,410 [1160] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-10 22:22:40,411 [1160] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 4
2023-05-10 22:22:40,411 [1160] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:4]
2023-05-10 22:22:40,412 [1160] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-05-10 22:22:40,413 [1160] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-10 22:22:40,423 [1160] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/__init__.py
2023-05-10 22:22:40,925 [1160] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/tokenize/__init__.py
2023-05-10 22:22:41,673 [1160] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-10 22:22:41,674 [1160] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-05-10 22:22:41,675 [1160] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-05-10 22:22:41,676 [1160] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:2] new[1:2]
2023-05-10 22:22:41,678 [1160] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 4 (to 3 in part parser)
2023-05-10 22:22:41,678 [1160] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2023-05-10 22:22:41,678 [1160] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-11 16:08:29,086 [4277] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-11 16:08:29,087 [4277] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-11 16:08:29,087 [4277] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-11 16:08:29,088 [4277] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-11 16:08:29,088 [4277] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-11 16:08:29,088 [4277] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-11 16:08:31,042 [4277] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-11 16:08:31,243 [4277] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-11 16:08:31,244 [4277] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-11 16:08:31,244 [4277] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-11 16:08:31,245 [4277] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-21 13:22:03,237 [3441] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-21 13:22:03,239 [3441] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-21 13:22:03,239 [3441] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-21 13:22:03,240 [3441] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-21 13:22:03,241 [3441] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-21 13:22:03,241 [3441] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-21 13:22:05,268 [3441] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-21 13:22:05,461 [3441] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-21 13:22:05,462 [3441] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-21 13:22:05,463 [3441] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-21 13:22:05,463 [3441] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-21 13:32:29,188 [3441] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-21 13:32:29,188 [3441] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-21 13:32:29,188 [3441] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-21 13:32:29,190 [3441] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-21 13:32:29,191 [3441] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-21 13:32:29,191 [3441] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-21 14:48:39,350 [3441] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-21 14:48:39,350 [3441] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-21 14:48:39,350 [3441] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-21 14:48:39,353 [3441] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-21 14:48:39,354 [3441] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-21 14:48:39,354 [3441] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-21 16:22:15,043 [4817] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-21 16:22:15,043 [4817] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-21 16:22:15,043 [4817] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-21 16:22:15,044 [4817] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-21 16:22:15,045 [4817] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-21 16:22:15,045 [4817] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-21 16:22:16,901 [4817] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-21 16:22:17,087 [4817] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-21 16:22:17,089 [4817] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-21 16:22:17,089 [4817] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-21 16:22:17,090 [4817] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-21 16:50:43,139 [4817] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-21 16:50:43,139 [4817] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-21 16:50:43,140 [4817] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-21 16:50:43,141 [4817] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-21 16:50:43,142 [4817] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-21 16:50:43,142 [4817] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-21 17:02:10,726 [4817] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-21 17:02:10,729 [4817] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 5
2023-05-21 17:02:10,729 [4817] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:6] new[1:5]
2023-05-21 17:02:10,731 [4817] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-05-21 17:02:10,732 [4817] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-21 17:02:14,661 [4817] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-21 17:02:14,662 [4817] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2023-05-21 17:02:14,662 [4817] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-05-21 17:02:14,663 [4817] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2023-05-21 17:02:14,663 [4817] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2023-05-21 17:02:14,664 [4817] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 5 (to 4 in part parser)
2023-05-21 17:02:14,664 [4817] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-21 17:02:30,326 [4817] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-21 17:02:30,328 [4817] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2023-05-21 17:02:30,328 [4817] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-05-21 17:02:30,328 [4817] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2023-05-21 17:02:30,329 [4817] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2023-05-21 17:02:30,330 [4817] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 5 (to 4 in part parser)
2023-05-21 17:02:30,330 [4817] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-22 07:54:51,888 [1009] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-22 07:54:51,889 [1009] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-22 07:54:51,889 [1009] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-22 07:54:51,890 [1009] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-22 07:54:51,890 [1009] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-22 07:54:51,890 [1009] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-22 07:54:53,826 [1009] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-22 07:54:54,029 [1009] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-22 07:54:54,030 [1009] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-22 07:54:54,031 [1009] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-22 07:54:54,031 [1009] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-24 20:27:47,461 [15715] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-24 20:27:47,462 [15715] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-24 20:27:47,462 [15715] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-24 20:27:47,463 [15715] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-24 20:27:47,463 [15715] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-24 20:27:47,463 [15715] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-24 20:27:49,367 [15715] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-24 20:27:49,559 [15715] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-24 20:27:49,560 [15715] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-24 20:27:49,561 [15715] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-24 20:27:49,562 [15715] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-24 20:48:36,311 [15715] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-24 20:48:36,311 [15715] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-24 20:48:36,311 [15715] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-24 20:48:36,315 [15715] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-24 20:48:36,315 [15715] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-24 20:48:36,315 [15715] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-25 17:11:16,732 [3857] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-25 17:11:16,733 [3857] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-25 17:11:16,733 [3857] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-25 17:11:16,734 [3857] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-25 17:11:16,734 [3857] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-25 17:11:16,734 [3857] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-25 17:11:18,713 [3857] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-25 17:11:18,926 [3857] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-25 17:11:18,927 [3857] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-25 17:11:18,927 [3857] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-25 17:11:18,928 [3857] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-25 19:02:38,806 [3857] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-25 19:02:38,806 [3857] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-25 19:02:38,806 [3857] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-25 19:02:38,808 [3857] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-25 19:02:38,808 [3857] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-25 19:02:38,809 [3857] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-27 18:11:54,089 [2952] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-27 18:11:54,089 [2952] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-27 18:11:54,089 [2952] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-27 18:11:54,090 [2952] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-27 18:11:54,091 [2952] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-27 18:11:54,091 [2952] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-27 18:11:56,075 [2952] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-27 18:11:56,290 [2952] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-27 18:11:56,291 [2952] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-27 18:11:56,292 [2952] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-27 18:11:56,293 [2952] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-27 18:31:37,021 [2952] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-27 18:31:37,021 [2952] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-27 18:31:37,021 [2952] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-27 18:31:37,023 [2952] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-27 18:31:37,024 [2952] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-27 18:31:37,024 [2952] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-27 19:14:55,485 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/builtins.pyi
2023-05-27 19:14:55,510 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-05-27 19:14:57,939 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 19:14:57,942 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-05-27 19:14:57,942 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-05-27 19:14:57,943 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-05-27 19:14:57,943 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-05-27 19:14:57,944 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-05-27 19:14:57,944 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 19:14:57,977 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/typing.py
2023-05-27 19:14:57,991 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/anaconda3/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2023-05-27 19:14:58,006 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/__init__.py
2023-05-27 19:14:58,007 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/tokenize/__init__.py
2023-05-27 19:14:58,470 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/sem/__init__.py
2023-05-27 19:14:58,740 [2952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /Users/teaching/.local/lib/python3.9/site-packages/nltk/grammar.py
2023-05-27 19:15:03,260 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 19:15:03,261 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-05-27 19:15:03,261 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-05-27 19:15:03,261 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-05-27 19:15:03,262 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-05-27 19:15:03,263 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-05-27 19:15:03,263 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 19:17:44,195 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 19:17:44,196 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 1
2023-05-27 19:17:44,197 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:7] new[1:1]
2023-05-27 19:17:44,197 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-05-27 19:17:44,198 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 19:44:01,156 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 19:44:01,159 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 8
2023-05-27 19:44:01,159 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:8]
2023-05-27 19:44:01,162 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-05-27 19:44:01,163 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:11:09,163 [3673] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-27 20:11:09,163 [3673] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-27 20:11:09,163 [3673] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-27 20:11:09,164 [3673] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-27 20:11:09,165 [3673] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-27 20:11:09,165 [3673] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-27 20:11:11,098 [3673] WARNING  py.warnings:109: [JupyterRequire] /Users/teaching/anaconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2023-05-27 20:11:11,299 [3673] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: bzr
2023-05-27 20:11:11,300 [3673] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: git
2023-05-27 20:11:11,300 [3673] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: hg
2023-05-27 20:11:11,301 [3673] DEBUG    pip._internal.vcs.versioncontrol:225: [JupyterRequire] Registered VCS backend: svn
2023-05-27 20:29:23,277 [2952] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-27 20:29:23,278 [2952] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-27 20:29:23,278 [2952] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-27 20:29:23,280 [2952] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-27 20:29:23,280 [2952] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-27 20:29:23,280 [2952] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-27 20:29:25,065 [3673] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-05-27 20:29:25,065 [3673] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-05-27 20:29:25,065 [3673] INFO     root:247: [JupyterRequire] Initializing comms.
2023-05-27 20:29:25,068 [3673] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-05-27 20:29:25,069 [3673] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-05-27 20:29:25,069 [3673] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-05-27 20:41:34,102 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:34,103 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 24
2023-05-27 20:41:34,103 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-05-27 20:41:34,103 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 3 in part parser)
2023-05-27 20:41:34,103 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[2:2] new[3:3]
2023-05-27 20:41:34,106 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 22 (to 23 in part parser)
2023-05-27 20:41:34,106 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:8] new[4:24]
2023-05-27 20:41:34,106 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 24 (to 23 in part parser)
2023-05-27 20:41:34,107 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:41:36,480 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:36,481 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 24
2023-05-27 20:41:36,481 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:41:36,482 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:41:36,484 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:41:36,484 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:24]
2023-05-27 20:41:36,485 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 24 (to 23 in part parser)
2023-05-27 20:41:36,485 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:41:36,735 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:36,736 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 24
2023-05-27 20:41:36,737 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:41:36,738 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:41:36,738 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:41:36,739 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:24]
2023-05-27 20:41:36,741 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 24 (to 23 in part parser)
2023-05-27 20:41:36,742 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:41:38,578 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:38,580 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 24
2023-05-27 20:41:38,580 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:41:38,581 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:41:38,582 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:41:38,588 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:24]
2023-05-27 20:41:38,590 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 24 (to 23 in part parser)
2023-05-27 20:41:38,590 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:41:38,865 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:38,866 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 24
2023-05-27 20:41:38,867 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:41:38,868 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:41:38,870 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:41:38,871 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:24]
2023-05-27 20:41:38,872 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 24 (to 23 in part parser)
2023-05-27 20:41:38,872 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:41:39,126 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:39,127 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 24
2023-05-27 20:41:39,128 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:41:39,128 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:41:39,129 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:41:39,130 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:24]
2023-05-27 20:41:39,131 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 24 (to 23 in part parser)
2023-05-27 20:41:39,131 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:41:39,434 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:41:39,435 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 24
2023-05-27 20:41:39,435 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:41:39,436 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:41:39,437 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:41:39,437 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:24]
2023-05-27 20:41:39,438 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 24 (to 23 in part parser)
2023-05-27 20:41:39,438 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:43:13,504 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:43:13,505 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 25
2023-05-27 20:43:13,505 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:23] new[1:23]
2023-05-27 20:43:13,506 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:22] new[1:22]
2023-05-27 20:43:13,508 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 23 to 23 (to 23 in part parser)
2023-05-27 20:43:13,509 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[24:24] new[24:25]
2023-05-27 20:43:13,510 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 25 (to 24 in part parser)
2023-05-27 20:43:13,511 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-05-27 20:43:33,998 [2952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-05-27 20:43:34,000 [2952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 25; new: 25
2023-05-27 20:43:34,001 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:24] new[1:24]
2023-05-27 20:43:34,002 [2952] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:24] new[1:24]
2023-05-27 20:43:34,002 [2952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[25:25] new[25:25]
2023-05-27 20:43:34,004 [2952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 25 to 25 (to 24 in part parser)
2023-05-27 20:43:34,005 [2952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
